= class Time < Object

include Comparable

時刻を表すクラスです。

[[m:Time.now]] は現在の時刻を返します。
[[m:File.mtime]] などが返すファイルのタイムスタンプは Time
オブジェクトです。

Time オブジェクトは時刻を起算時からの経過秒数で保持しています。
起算時は協定世界時(UTC、もしくはその旧称から GMT とも表記されます) の
1970年1月1日午前0時です。なお、うるう秒を勘定するかどうかはシステムに
よります。

現在の Unix システムでの最大時刻は、
協定世界時の2038年1月19日午前3時14分7秒
です。
#@# ENV["TZ"]=""; p Time.at(0x7fffffff) # => Tue Jan 19 03:14:07 UTC 2038

Time オブジェクトが格納可能な時刻の範囲は環境によって異なります。
範囲の下限としては、上記起算時からの経過秒数として 0 および正数しか
受け付けない環境もあれば、負数も受け付ける環境もあります。
また、範囲の上限としては、上記の Unix システムでの最大時刻を越えて
64bit 値の範囲の経過秒数を受け付ける環境もあります。
さらに、他に特定の時点を越える時刻の値を受け付けない環境もあります。
Time オブジェクトを生成する各メソッドで、それぞれの環境での範囲外の
時刻を格納しようとした場合は例外が発生します。

また、Time オブジェクトは協定世界時と地方時のどちらのタイムゾー
ンを使用するかのフラグを内部に保持しています。
#@since 1.9.1
タイムゾーンのフラグは Marshal データに保持されます。

  p Marshal.load(Marshal.dump(Time.now.gmtime)).zone
  # => "UTC"
#@else
ただし、この情報は
[[m:Marshal.#dump]] では保存されず、[[m:Marshal.#load]]
で読み込んだ Time オブジェクトのタイムゾーンは常に地方時になりま
す。

  p Marshal.load(Marshal.dump(Time.now.gmtime)).zone
  # => "JST"

#@end

[[lib:time]] ライブラリによって、[[m:Time.parse]], [[m:Time.rfc2822]], [[m:Time.httpdate]], [[m:Time.iso8601]] 等が拡張されます。

[[man:localtime(3)]] も参照しください。

=== C 言語との違いに注意

C 言語の tm 構造体とは異なり、month は 1 月に対
して 1 を返し、year は 1998 年に対して 1998 を返します。また、
yday は 1 から数えます。

== Class Methods

--- at(time)    -> Time

time で指定した時刻の Time オブジェクトを返します。

引数が数値の場合、生成された Time オブジェクトのタイムゾーンは地方時となります。

@param time Time オブジェクト、もしくは起算時からの経過秒数を表わす数値で指定します。

--- at(time, usec)    -> Time

time + (usec/1000000) の時刻を表す Time オブジェクトを返します。
浮動小数点の精度では不十分な場合に使用します。

生成された Time オブジェクトのタイムゾーンは地方時となります。

@param time 起算時からの経過秒数を表わす整数を指定します。

@param usec マイクロ秒を整数で指定します。

--- gm(year, mon = 1, day = 1, hour = 0, min = 0, sec = 0, usec = 0)             -> Time
--- utc(year, mon = 1, day = 1, hour = 0, min = 0, sec = 0, usec = 0)            -> Time

引数で指定した協定世界時の Time オブジェクトを返します。

第2引数以降に nil を指定した場合の値はその引数がとり得る最小の値です。

@param year 年を整数か文字列で指定します。例えば 1998 年に対して 1998 を指定します。
            ただし、0 以上 38 以下の整数が与えられた場合は、2000年代の下2桁だと解釈します。
            69 以上 138 以下の整数が与えられた場合は、1900 にその数を足した年だと解釈されます。

@param mon 1(1月)から 12(12月)の範囲の整数または文字列で指定します。
           英語の月名("Jan", "Feb", ... などの省略名。文字の大小は無視)も指定できます。

@param  day 日を 1 から 31 までの整数か文字列で指定します。

@param  hour 時を 0 から 23 までの整数か文字列で指定します。

@param  min 分を 0 から 59 までの整数か文字列で指定します。

@param  sec 秒を 0 から 60 までの整数か文字列で指定します。(60はうるう秒)

@param  usec マイクロ秒を整数か文字列で指定します。

@raise ArgumentError 与えられた引数の範囲が valid でない場合に発生します。

  p Time.gm(2000, 1, 1)  #=> Sat Jan 01 00:00:00 UTC 2000

--- gm(sec, min, hour, mday, mon, year, wday, yday, isdst, zone)     -> Time
--- utc(sec, min, hour, mday, mon, year, wday, yday, isdst, zone)    -> Time

引数で指定した協定世界時の Time オブジェクトを返します。

引数の順序は [[m:Time#to_a]] と全く同じです。
引数 wday, yday, zone に指定した値は無視されます。
引数に nil を指定した場合の値はその引数がとり得る最小の値です。

@param  sec 秒を 0 から 60 までの整数か文字列で指定します。(60はうるう秒)

@param  min 分を 0 から 59 までの整数か文字列で指定します。

@param  hour 時を 0 から 23 までの整数か文字列で指定します。

@param  mday 日を 1 から 31 までの整数か文字列で指定します。

@param mon 1(1月)から 12(12月)の範囲の整数か文字列で指定します。
           英語の月名("Jan", "Feb", ... などの省略名。文字の大小は無視)も指定できます。

@param year 年を整数か文字列で指定します。例えば 1998 年に対して 1998 を指定します。
            ただし、0 以上 38 以下の整数が与えられた場合は、2000年代の下2桁だと解釈します。
            69 以上 138 以下の整数が与えられた場合は、1900 にその数を足した年だと解釈されます。

@param wday 無視されます。

@param yday 無視されます。

@param isdst 指定した日時が夏時間(Daylight Saving Time)なら true を指定します。
             そうでないなら、false を指定します。

@param zone 無視されます。

@raise ArgumentError 与えられた引数の範囲が valid でない場合に発生します。

--- local(year, mon = 1, day = 1, hour = 0, min = 0, sec = 0, usec = 0)      -> Time
--- mktime(year, mon = 1, day = 1, hour = 0, min = 0, sec = 0, usec = 0)     -> Time

引数で指定した地方時の Time オブジェクトを返します。

第2引数以降に nil を指定した場合の値はその引数がとり得る最小の値です。

@param year 年を整数か文字列で指定します。例えば 1998 年に対して 1998 を指定します。
            ただし、0 以上 38 以下の整数が与えられた場合は、2000年代の下2桁だと解釈します。
            69 以上 138 以下の整数が与えられた場合は、1900 にその数を足した年だと解釈されます。

@param mon 1(1月)から 12(12月)の範囲の整数または文字列で指定します。
           英語の月名("Jan", "Feb", ... などの省略名。文字の大小は無視)も指定できます。

@param  day 日を 1 から 31 までの整数か文字列で指定します。

@param  hour 時を 0 から 23 までの整数か文字列で指定します。

@param  min 分を 0 から 59 までの整数か文字列で指定します。

@param  sec 秒を 0 から 60 までの整数か文字列で指定します。(60はうるう秒)

@param  usec マイクロ秒を整数か文字列で指定します。

@raise ArgumentError 与えられた引数の範囲が valid でない場合に発生します。

 p Time.local(2000, 1, 1) #=> Sat Jan 01 00:00:00 +0900 2000

--- local(sec, min, hour, mday, mon, year, wday, yday, isdst, zone)     -> Time
--- mktime(sec, min, hour, mday, mon, year, wday, yday, isdst, zone)    -> Time

引数で指定した地方時の Time オブジェクトを返します。

引数の順序は [[m:Time#to_a]] と全く同じです。
引数 wday, yday, zone に指定した値は無視されます。
引数に nil を指定した場合の値はその引数がとり得る最小の値です。

@param  sec 秒を 0 から 60 までの整数か文字列で指定します。(60はうるう秒)

@param  min 分を 0 から 59 までの整数か文字列で指定します。

@param  hour 時を 0 から 23 までの整数か文字列で指定します。

@param  mday 日を 1 から 31 までの整数か文字列で指定します。

@param mon 1(1月)から 12(12月)の範囲の整数か文字列で指定します。
           英語の月名("Jan", "Feb", ... などの省略名。文字の大小は無視)も指定できます。

@param year 年を整数か文字列で指定します。例えば 1998 年に対して 1998 を指定します。
            ただし、0 以上 38 以下の整数が与えられた場合は、2000年代の下2桁だと解釈します。
            69 以上 138 以下の整数が与えられた場合は、1900 にその数を足した年だと解釈されます。

@param wday 無視されます。

@param yday 無視されます。

@param isdst 指定した日時が夏時間(Daylight Saving Time)なら true を指定します。
             そうでないなら、false を指定します。

@param zone 無視されます。

@raise ArgumentError 与えられた引数の範囲が valid でない場合に発生します。

--- new    -> Time
--- now    -> Time

現在時刻の Time オブジェクトを生成して返します。
タイムゾーンは地方時となります。

#@since 1.9.2
--- new(year, mon = nil, day = nil, hour = nil, min = nil, sec = nil, utc_offset = nil)    -> Time

引数で指定した地方時の Time オブジェクトを返します。

mon day hour min sec に nil を指定した場合の値は、その引数がとり得る最小の値です。
utc_offset に nil を指定した場合の値は、現在のタイムゾーンに従います。

@param year 年を整数か文字列で指定します。例えば 1998 年に対して 1998 を指定します。

@param mon 1(1月)から 12(12月)の範囲の整数または文字列で指定します。
           英語の月名("Jan", "Feb", ... などの省略名。文字の大小は無視)も指定できます。

@param  day 日を 1 から 31 までの整数か文字列で指定します。

@param  hour 時を 0 から 23 までの整数か文字列で指定します。

@param  min 分を 0 から 59 までの整数か文字列で指定します。

@param  sec 秒を 0 から 60 までの整数か文字列で指定します。(60はうるう秒)

@param  utc_offset 協定世界時との時差を、秒を単位とする整数か、 
                   "+HH:MM" "-HH:MM" 形式の文字列で指定します。

@raise ArgumentError 与えられた引数の範囲が valid でない場合に発生します。

  p Time.new(2008, 6, 21, 13, 30, 0, "+09:00") #=> 2008-06-21 13:30:00 +0900
#@end

#@until 1.9.1
--- times    -> Struct::Tms

このメソッドは obsolete です。

自身のプロセスとその子プロセスが消費したユーザ/システム CPU
時間の積算を [[c:Struct::Tms]] のオブジェクトとして返します。
Struct::Tms は以下のメンバを持つ構造体クラスです。

 * utime           # user time
 * stime           # system time
 * cutime          # user time of children
 * cstime          # system time of children

時間の単位は秒で、浮動小数点数で与えられます。詳細は
[[man:times(3)]] を参照してください。

このメソッドは [[m:Process.#times]] に移動しました。Time.times も使えます
が、警告メッセージが出力されます。
#@end

== Instance Methods

--- +(other)    -> Time

self より other 秒だけ後の時刻を返します。

@param other 自身からの秒数を数値で指定します。

  t = Time.now         #=> Wed Apr 09 08:56:03 CDT 2003
  t + (60 * 60 * 24)   #=> Thu Apr 10 08:56:03 CDT 2003

--- -(time)    -> Float

自身と time との時刻の差を [[c:Float]] で返します。単位は秒です。

@param time 自身との差を算出したい Time オブジェクトを指定します。

  t = Time.now       #=> Wed Apr 09 08:56:03 CDT 2003
  t2 = t + 2592000   #=> Fri May 09 08:56:03 CDT 2003
  t2 - t             #=> 2592000.0

--- -(sec)    -> Time

自身より sec 秒だけ前の時刻を返します。

@param sec 実数を秒を単位として指定します。

  t = Time.now       #=> Wed Apr 09 08:56:03 CDT 2003
  t2 = t + 2592000   #=> Fri May 09 08:56:03 CDT 2003
  t2 - 2592000       #=> Wed Apr 09 08:56:03 CDT 2003

--- <=>(other) -> -1 | 0 | 1 | nil

self と other の時刻を比較します。self の方が大きい場合は 1 を、等しい場合は 0 を、
小さい場合は -1 を返します。比較できない場合は、nil を返します。

#@since 1.8.0
@param other 自身と比較したい時刻を Time オブジェクトで指定します。
#@else
@param other 自身と比較したい時刻を Time オブジェクトか数値で指定します。
             数値の場合は起算時からの経過秒数とみなして比較します。
#@end

--- eql?(other)    -> bool

other が Time かそのサブクラスのインスタンスであり自身と時刻が等しい場合に
true を返します。そうでない場合に false を返します。

@param other 自身と比較したい時刻を Time オブジェクトを指定します。

--- asctime    -> String
--- ctime      -> String

時刻を [[man:asctime(3)]] の形式の文字列に変換します。た
だし、末尾の改行文字 "\n" は含まれません。

#@since 1.9.1
#@since 2.0.0
戻り値の文字エンコーディングは [[m:Encoding::US_ASCII]] です。
#@else
戻り値の文字エンコーディングは [[m:Encoding::ASCII_8BIT]] です。
#@end
#@end

--- gmt?    -> bool
--- utc?    -> bool

self のタイムゾーンが協定世界時に設定されていれば真を返します。

#@since 1.8.0
--- getgm     -> Time
--- getutc    -> Time

タイムゾーンを協定世界時に設定した Time オブジェクトを新しく
生成して返します。

  t = Time.local(2000,1,1,20,15,1)   #=> Sat Jan 01 20:15:01 CST 2000
  t.gmt?                             #=> false
  y = t.getgm                        #=> Sun Jan 02 02:15:01 UTC 2000
  y.gmt?                             #=> true
  t == y                             #=> true

#@end

#@since 1.8.0
--- getlocal     -> Time

タイムゾーンを地方時に設定した Time オブジェクトを新しく生成
して返します。

  t = Time.gm(2000,1,1,20,15,1)   #=> Sat Jan 01 20:15:01 UTC 2000
  t.gmt?                          #=> true
  l = t.getlocal                  #=> Sat Jan 01 14:15:01 CST 2000
  l.gmt?                          #=> false
  t == l                          #=> true

#@end

--- gmtime    -> self
--- utc       -> self

タイムゾーンを協定世界時に設定します。

このメソッドを呼び出した後は時刻変換を協定世界時として行ないます。

[[m:Time#localtime]], [[m:Time#gmtime]] の挙動はシステムの
[[man:localtime(3)]] の挙動に依存します。Time クラ
スでは時刻を起算時からの経過秒数として保持していますが、ある特定の
時刻までの経過秒は、システムがうるう秒を勘定するかどうかによって異
なる場合があります。システムを越えて Time オブジェクトを受け
渡す場合には注意する必要があります。

  t = Time.now   #=> Wed Apr 09 08:56:03 CDT 2003
  t.gmt?         #=> false
  t.gmtime       #=> Wed Apr 09 13:56:03 UTC 2003
  t.gmt?         #=> true

--- localtime     -> self

タイムゾーンを地方時に設定します。

このメソッドを呼び出した後は時刻変換を協定地方時として行ないます。

[[m:Time#localtime]], [[m:Time#gmtime]] の挙動はシステムの
[[man:localtime(3)]] の挙動に依存します。Time クラ
スでは時刻を起算時からの経過秒数として保持していますが、ある特定の
時刻までの経過秒は、システムがうるう秒を勘定するかどうかによって異
なる場合があります。システムを越えて Time オブジェクトを受け
渡す場合には注意する必要があります。

  t = Time.gm(2000, "jan", 1, 20, 15, 1)
  t.gmt?        #=> true
  t.localtime   #=> Sat Jan 01 14:15:01 CST 2000
  t.gmt?        #=> false

--- strftime(format)    -> String

時刻を format 文字列に従って文字列に変換した結果を返します。

@param format フォーマット文字列を指定します。使用できるものは 以下の通りです。

#@since 1.9.1
  * %A: 曜日の名称(Sunday, Monday ... )
  * %a: 曜日の省略名(Sun, Mon ... )
  * %B: 月の名称(January, February ... )
  * %b: 月の省略名(Jan, Feb ... )
  * %C: 世紀 (2009年であれば 20)
  * %c: 日付と時刻
  * %D: 日付 (%m/%d/%y)
  * %d: 日(01-31)
  * %e: 日。一桁の場合、半角空白で埋める ( 1..31)
  * %F: %Y-%m-%d と同等 (ISO 8601の日付フォーマット)
  * %H: 24時間制の時(00-23)
  * %h: %b と同等
  * %I: 12時間制の時(01-12)
  * %j: 年中の通算日(001-366)
  * %k: 24時間制の時。一桁の場合、半角空白で埋める ( 0..23)
  * %L: ミリ秒 (000.999)
  * %l: 12時間制の時。一桁の場合、半角空白で埋める ( 0..12)
  * %M: 分(00-59)
  * %m: 月を表す数字(01-12)
  * %n: 改行 (\n)
  * %N: 秒の小数点以下。桁の指定がない場合は9桁 (ナノ秒)、%6N: マイクロ秒 (6桁)、%3N: ミリ秒 (3桁)
  * %P: 午前または午後(am,pm)
  * %p: 午前または午後(AM,PM)
  * %R: 24時間制の時刻。%H:%M と同等。
  * %r: 12時間制の時刻。%I:%M:%S %p と同等。
  * %S: 秒(00-60) (60はうるう秒)
  * %s: 1970-01-01 00:00:00 UTC からの経過秒
  * %T: 24時間制の時刻。%H:%M:%S と同等。
  * %t: タブ文字 (\t)
  * %U: 週を表す数。最初の日曜日が第1週の始まり(00-53)
  * %u: 月曜日を1とした、曜日の数値表現 (1..7)
  * %v: VMS形式の日付 (%e-%b-%Y)
  * %V: ISO 8601形式の暦週 (01..53)
  * %W: 週を表す数。最初の月曜日が第1週の始まり(00-53)
  * %w: 曜日を表す数。日曜日が0(0-6)
  * %X: 時刻
  * %x: 日付
  * %Y: 西暦を表す数
  * %y: 西暦の下2桁(00-99)
  * %Z: タイムゾーン
#@#  * %Z: タイムゾーン  [[unknown:trap|trap::Time]]
  * %z: タイムゾーン。UTCからのオフセット (例 +0900)
#@since 1.9.3
  * %:z: タイムゾーン。コロンが入ったUTCからのオフセット (例 +09:00)
  * %::z: タイムゾーン。コロンが入った秒まで含むUTCからのオフセット (例 +09:00:00)
#@end
  * %%: %自身
#@else
  * %A: 曜日の名称(Sunday, Monday ... )
  * %a: 曜日の省略名(Sun, Mon ... )
  * %B: 月の名称(January, February ... )
  * %b: 月の省略名(Jan, Feb ... )
  * %c: 日付と時刻
  * %d: 日(01-31)
  * %H: 24時間制の時(00-23)
  * %I: 12時間制の時(01-12)
  * %j: 年中の通算日(001-366)
  * %M: 分(00-59)
  * %m: 月を表す数字(01-12)
  * %p: 午前または午後(AM,PM)
  * %S: 秒(00-60) (60はうるう秒)
  * %U: 週を表す数。最初の日曜日が第1週の始まり(00-53)
  * %W: 週を表す数。最初の月曜日が第1週の始まり(00-53)
  * %w: 曜日を表す数。日曜日が0(0-6)
  * %X: 時刻
  * %x: 日付
  * %Y: 西暦を表す数
  * %y: 西暦の下2桁(00-99)
  * %Z: タイムゾーン
#@#  * %Z: タイムゾーン  [[unknown:trap|trap::Time]]
  * %%: %自身
#@end

#@since 1.9.1
このメソッドは [[man:strftime(3)]] や glibcの仕様を参考に作成されており、以下のオプションが利用できます。
  * ^: 大文字で出力を行なう
  * #: 小文字であれば大文字に、大文字であれば小文字に変更する
  * -: 左寄せにする(0埋めや空白埋めを行わない)
  * _: 空白埋めにする
  * 0: 0埋めにする
  * 数値: 表示桁数を指定する

  t = Time.now                         #=> 2010-09-05 15:41:17 0900
  t.strftime("Printed on %m/%d/%Y")    #=> "Printed on 09/05/2010"
  t.strftime("Printed on %m/%-d/%_6Y") #=> "Printed on 09/5/  2010"
  t.strftime("at %I:%M%p")             #=> "at 03:41PM"
  t.strftime("at %I:%M%#p")            #=> "at 03:41pm"
#@else
現在の実装では、このメソッドは、システムの [[man:strftime(3)]]
をそのまま使用しています。そのためここにあげた指示子以外のものが使
用できる場合があります。ただし、上記以外の指示子を使用した場合、移
植性をそこなう可能性がある点に注意してください。

  t = Time.now
  t.strftime("Printed on %m/%d/%Y")   #=> "Printed on 04/09/2003"
  t.strftime("at %I:%M%p")            #=> "at 08:56AM"
#@end

--- sec    -> Integer

秒を整数で返します。

  Time.mktime(2000, 1, 1).sec #=> 0

通常は0から59を返しますが、うるう秒の場合は60を返します。

  ENV['TZ'] = 'right/UTC'
  Time.mktime(2005, 12, 31, 23, 59, 60).sec #=> 60

--- min    -> Integer

分を整数で返します。

--- hour    -> Integer

時を整数で返します。

--- mday    -> Integer
--- day     -> Integer

日を整数で返します。

  p Time.local(2000, 1, 1).day #=> 1

--- mon      -> Integer
--- month    -> Integer

月を整数で返します。

  p Time.local(2000, 1, 1).month #=> 1

--- year    -> Integer

年を整数で返します。

  p Time.local(2000, 1, 1).year #=> 2000

--- wday    -> Integer

曜日を0(日曜日)から6(土曜日)の整数で返します。

--- yday    -> Integer

1月1日を1とした通算日(1から366まで)を整数で返します。

  Time.mktime(2000,  1,  1).yday #=> 1

うるう年の場合は、2月29日も含めた通算日を返します。

  # うるう年でない場合
  Time.mktime(2003,  1,  1).yday #=> 1
  Time.mktime(2003,  3,  1).yday #=> 60
  Time.mktime(2003, 12, 31).yday #=> 365
  
  # うるう年の場合
  Time.mktime(2004,  1,  1).yday #=> 1
  Time.mktime(2004,  2, 29).yday #=> 60
  Time.mktime(2004, 12, 31).yday #=> 366

--- isdst    -> bool
--- dst?     -> bool

自身が表す日時が夏時間なら true を返します。そうでないなら false を返します。

  ENV['TZ'] = 'US/Pacific'
  Time.local(2000, 7, 1).isdst   #=> true
  Time.local(2000, 1, 1).isdst   #=> false

--- zone    -> String

タイムゾーンを表す文字列を返します。

 p Time.now.zone #=> "JST"

#@since 1.8.0
--- succ    -> Time

self に 1 秒足した Time オブジェクトを生成して返します。
#@until 1.8.6
タイムゾーンは地方時になります。
#@end

#@since 1.9.2
このメソッドは obsolete です。 self + 1 を代わりに使用してください。
#@end

  t = Time.now
  p t
  p t.succ
  # => Sun Jul 18 01:41:22 JST 2004
       Sun Jul 18 01:41:23 JST 2004

#@end

--- utc_offset     -> Integer
--- gmt_offset     -> Integer
--- gmtoff         -> Integer

協定世界時との時差を秒を単位とする数値として返します。

地方時が協定世界時よりも進んでいる場合(アジア、オーストラリアなど)
には正の値、遅れている場合(アメリカなど)には負の値になります。

  p Time.now.zone  # => "JST"
  p Time.now.utc_offset
  # => 32400

タイムゾーンが協定世界時に設定されている場合は 0 を返します。

  p Time.now.zone  # => "JST"
  p Time.now.getgm.utc_offset
  # => 0

--- to_a     -> Array

時刻を10要素の配列で返します。

その要素は順序も含めて以下の通りです。

  * sec:   秒 (整数 0-60) (60はうるう秒)
  * min:   分 (整数 0-59)
  * hour:  時 (整数 0-23)
  * mday:  日 (整数)
  * mon:   月 (整数 1-12)
  * year:  年 (整数 2000年=2000)
  * wday:  曜日 (整数 0-6)
  * yday:  年内通算日 (整数 1-366)
  * isdst: 夏時間であるかどうか (true/false)
  * zone:  タイムゾーン (文字列)

  p Time.now      # => Mon Oct 20 06:02:10 JST 2003
  p Time.now.to_a # => [10, 2, 6, 20, 10, 2003, 1, 293, false, "JST"]

要素の順序は C 言語の tm 構造体に合わせています。ただし、
tm 構造体に zone はありません。

注意: C 言語の tm 構造体とは異なり、month は 1 月に対
して 1 を返し、year は 1998 年に対して 1998 を返します。また、
yday は 1 から数えます。

--- to_f    -> Float

起算時からの経過秒数を浮動小数点数で返します。1 秒に満たない経過も
表現されます。

  t = Time.now
  "%10.5f" % t.to_f   #=> "1049896564.13654"
  t.to_i              #=> 1049896564

#@since 1.9.2
--- to_r    -> Rational

起算時からの経過秒数を有理数で返します。1 秒に満たない経過も
表現されます。

  t = Time.now
  p t.to_r     # => (8807170717088293/8388608)

#@end
--- to_i      -> Integer
--- tv_sec    -> Integer

起算時からの経過秒数を整数で返します。

--- to_s     -> String

時刻を [[man:date(1)]] のような形式の文字列に変換します。

  self.strftime("%a %b %d %H:%M:%S %Z %Y")

と同じです。

  p Time.now.to_s # => "Mon Oct 20 06:02:10 JST 2003"

#@since 1.9.1
#@since 2.0.0
戻り値の文字エンコーディングは [[m:Encoding::US_ASCII]] です。
#@else
戻り値の文字エンコーディングは [[m:Encoding::ASCII_8BIT]] です。
#@end
#@end

--- usec         -> Integer
--- tv_usec      -> Integer

時刻のマイクロ秒の部分を整数で返します。

#@since 1.9.1

--- friday? -> bool

自身の表す時刻が金曜日である場合に true を返します。
そうでない場合に false を返します。

--- monday? -> bool

自身の表す時刻が月曜日である場合に true を返します。
そうでない場合に false を返します。

--- saturday? -> bool

自身の表す時刻が土曜日である場合に true を返します。
そうでない場合に false を返します。

--- sunday? -> bool

自身の表す時刻が日曜日である場合に true を返します。
そうでない場合に false を返します。

   t = Time.now   #=> Sun Oct 23 00:14:54 UTC 2005
   t.sunday?      #=> true

--- thursday? -> bool

自身の表す時刻が木曜日である場合に true を返します。
そうでない場合に false を返します。

--- tuesday? -> bool

自身の表す時刻が火曜日である場合に true を返します。
そうでない場合に false を返します。

--- wednesday? -> bool

自身の表す時刻が水曜日である場合に true を返します。
そうでない場合に false を返します。

--- nsec    -> Integer
--- tv_nsec -> Integer

時刻のナノ秒の部分を整数で返します。

   t = Time.now        #=> 2007-11-17 15:18:03 +0900
   "%10.9f" % t.to_f   #=> "1195280283.536151409"
   t.nsec              #=> 536151406

IEEE 754 浮動小数点数で表現できる精度が違うため、[[m:Time#to_f]]の最小
の桁とnsecの最小の桁は異なります。nsecで表される値の方が正確です。

#@end
#@since 1.9.2
--- round(ndigits=0) -> Time

十進小数点数で指定した桁数の精度で丸めをし、
その [[c:Time]] オブジェクト返します。
(デフォルトは0、つまり小数点の所で丸めます)。

ndigits には 0 以上の整数を渡します。

@param ndigits 十進での精度(桁数)

    require 'time'

    t = Time.utc(1999,12,31, 23,59,59)
    p((t + 0.4).round.iso8601(3))    #=> "1999-12-31T23:59:59.000Z"
    p((t + 0.49).round.iso8601(3))   #=> "1999-12-31T23:59:59.000Z"
    p((t + 0.5).round.iso8601(3))    #=> "2000-01-01T00:00:00.000Z"
    p((t + 1.4).round.iso8601(3))    #=> "2000-01-01T00:00:00.000Z"
    p((t + 1.49).round.iso8601(3))   #=> "2000-01-01T00:00:00.000Z"
    p((t + 1.5).round.iso8601(3))    #=> "2000-01-01T00:00:01.000Z"

    t = Time.utc(1999,12,31, 23,59,59)
    p (t + 0.123456789).round(4).iso8601(6)  #=> "1999-12-31T23:59:59.123500Z"

--- subsec -> Integer | Rational

時刻を表す分数を返します。

[[c:Rational]] を返す場合があります。

   t = Time.now        #=> 2009-03-26 22:33:12 +0900
   "%10.9f" % t.to_f   #=> "1238074392.940563917"
   t.subsec            #=> (94056401/100000000)

to_f の値と subsec の値の下のほうの桁の値は異なる場合があります。
というのは IEEE 754 double はそれを表すのに十分な精度を
持たないからです。subsec で得られる値が正確です。

#@end
