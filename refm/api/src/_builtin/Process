= module Process

UNIX のプロセスを管理するモジュールです。

Process がプロセスを表現するクラスではなく、プロセスに対する操作
をまとめたモジュールであることに注意してください。

ユーザ ID・グループ ID を操作するシステムコールを直接呼ぶために [[c:Process::Sys]] が提供されています。
ポータブルにユーザ ID・グループ ID を操作するためのモジュール [[c:Process::UID]], [[c:Process::GID]] 
も提供されています。

== Singleton Methods

#@since 1.8.0
--- abort(message = "")   -> ()

関数 [[m:Kernel.#abort]] と同じです。

@param message 終了時のメッセージを文字列で指定します。

#@end

#@since 1.8.7
--- exec(command, *args) -> ()

カレントプロセスを与えられた外部コマンドで置き換えます。


==== 引数の解釈

引数が一つだけ与えられた場合、command が shell のメタ文字
//emlist{
  * ? {} [] <> () ~ & | \ $ ; ' ` " \n
//}
を含む場合、shell 経由で実行されます。
そうでなければインタプリタから直接実行されます。

引数が複数与えられた場合、第 2 引数以降は command に直接渡され、
インタプリタから直接実行されます。

第 1 引数が 2 要素の配列の場合、第 1 要素の文字列が実際に起動する
プログラムのパスで、第 2 要素が「みせかけ」のプログラム名になります。

MSDOS 環境の場合、command はサブシェル経由で実行されます。
そうでない場合、command は [[man:exec(2)]] を使用して実行されるので元の
プログラムからいくつかの環境を引き継ぎます。

@param command 実行する外部コマンド。

@param args command に渡す引数。

   exec "echo *"       # echoes list of files in current directory
   # never get here


   exec "echo", "*"    # echoes an asterisk
   # never get here


#@end

#@since 1.8.0
--- exit(status = true)    -> ()

プロセスを終了します。関数 [[m:Kernel.#exit]] と同じです。

@param status 終了ステータスを boolean か整数で指定します。true の場合は成功を、false は失敗を意味します。

@see [[man:exit(3)]]

#@end

--- exit!(status = false)    -> ()

関数 [[m:Kernel.#exit!]] と同じです。

@param status 終了ステータスを boolean か整数で指定します。true の場合は成功を、false は失敗を意味します。

@see [[man:_exit(2)]]

--- fork            -> Integer | nil
--- fork { ... }    -> Integer | nil

子プロセスを生成します。関数 [[m:Kernel.#fork]] と同じです。

@raise NotImplementedError メソッドが現在のプラットフォームで実装されていない場合に発生します。

@see [[man:fork(2)]]

#@since 1.9.1
--- spawn(cmd, *arg)    -> Integer

関数 [[m:Kernel.#spawn]] と同じです。

@param cmd [[m:Kernel.#spawn]] と同じです。

@param arg [[m:Kernel.#spawn]] と同じです。

@raise NotImplementedError メソッドが現在のプラットフォームで実装されていない場合に発生します。

#@end

== Module Functions

#@since 1.8.5
--- getrlimit(resource)    -> [Integer]

カレントプロセスでのリソースの制限値を、整数の配列として返します。
返り値は、現在の制限値 cur_limit と、制限値として設定可能な最大値 max_limit の
配列 [cur_limit, max_limit] です。

それぞれの limit が [[m:Process::RLIM_INFINITY]] と等しい場合、リソースに制限がないことを意味します。

@param resource リソースの種類を示す定数を指定します。指定できる定数はシステムに依存します。

@raise Errno::EXXX リソースの制限値の取得が失敗した場合に発生します。

@raise NotImplementedError メソッドが現在のプラットフォームで実装されていない場合に発生します。

引数 resource で有効な定数は以下のとおりです。

: [[m:Process::RLIMIT_CORE]]
 core ファイルのサイズ (バイト) (SUSv3)
: [[m:Process::RLIMIT_CPU]]
 プロセスの CPU 時間 (秒) (SUSv3)
: [[m:Process::RLIMIT_DATA]]
 プロセスのデータ領域のサイズ (バイト) (SUSv3)
: [[m:Process::RLIMIT_FSIZE]]
 プロセスが生成するファイルのサイズ (バイト) (SUSv3)
: [[m:Process::RLIMIT_NOFILE]]
 プロセスがオープンできるファイルの数 (SUSv3)
: [[m:Process::RLIMIT_STACK]]
 プロセスのスタック領域のサイズ (バイト) (SUSv3)
: [[m:Process::RLIMIT_AS]]
 プロセスの仮想メモリサイズ (バイト) (SUSv3, NetBSD, FreeBSD, OpenBSD but 4.4BSD-Lite))
: [[m:Process::RLIMIT_MEMLOCK]]
 [[man:mlock(2)]] でロックできるトータルのサイズ (バイト) (4.4BSD, GNU/Linux)
: [[m:Process::RLIMIT_NPROC]] 
 そのユーザのプロセスの最大数 (4.4BSD, GNU/Linux)
: [[m:Process::RLIMIT_RSS]]
 使用できる実メモリの最大サイズ (バイト) (4.2BSD, GNU/Linux)
: [[m:Process::RLIMIT_SBSIZE]]
 ソケットバッファのサイズ (バイト) (NetBSD, FreeBSD)

例:

 include Process
 p lim = getrlimit(RLIMIT_STACK)                                        #=> [8388608, 18446744073709551615]
 p lim.map{|i| i == RLIM_INFINITY ? "unlimited" : "#{i/(1024**2)}MB" }  #=> ["8MB", "unlimited"]

@see [[m:Process.#setrlimit]], [[man:getrlimit(2)]]

--- setrlimit(resource, cur_limit, max_limit)    -> nil
--- setrlimit(resource, limit)                   -> nil

カレントプロセスでのリソースの制限値を設定します。

@param resource リソースの種類を示す定数を指定します。指定できる定数はシステムに依存します。

@param limit resource によって意味が決まる制限値を表す整数もしくは定数を指定します。
             soft limit と hard limit 両方にこの値が使われます。

@param cur_limit 現在の制限値(soft limit)を表す整数もしくは定数を指定します。

@param max_limit soft limit として設定可能な最大値(hard limit)を表す整数もしくは定数を指定します。

@raise Errno::EXXX リソースの制限値の設定に失敗した場合に発生します。

@raise NotImplementedError メソッドが現在のプラットフォームで実装されていない場合に発生します。

引数 resource で有効な定数は以下のとおりです。

: [[m:Process::RLIMIT_CORE]]
 core ファイルのサイズ (バイト) (SUSv3)
: [[m:Process::RLIMIT_CPU]]
 プロセスの CPU 時間 (秒) (SUSv3)
: [[m:Process::RLIMIT_DATA]]
 プロセスのデータ領域のサイズ (バイト) (SUSv3)
: [[m:Process::RLIMIT_FSIZE]]
 プロセスが生成するファイルのサイズ (バイト) (SUSv3)
: [[m:Process::RLIMIT_NOFILE]]
 プロセスがオープンできるファイルの数 (SUSv3)
: [[m:Process::RLIMIT_STACK]]
 プロセスのスタック領域のサイズ (バイト) (SUSv3)
: [[m:Process::RLIMIT_AS]]
 プロセスの仮想メモリサイズ (バイト) (SUSv3, NetBSD, FreeBSD, OpenBSD but 4.4BSD-Lite))
: [[m:Process::RLIMIT_MEMLOCK]]
 [[man:mlock(2)]] でロックできるトータルのサイズ (バイト) (4.4BSD, GNU/Linux)
: [[m:Process::RLIMIT_NPROC]]
 そのユーザのプロセスの最大数 (4.4BSD, GNU/Linux)
: [[m:Process::RLIMIT_RSS]]
 使用できる実メモリの最大サイズ (バイト) (4.2BSD, GNU/Linux)
: [[m:Process::RLIMIT_SBSIZE]]
 ソケットバッファのサイズ (バイト) (NetBSD, FreeBSD)

引数 limit, cur_limit, max_limit で有効な定数は以下のとおりです。

 * [[m:Process::RLIM_INFINITY]] リソースに制限を設けないことを意味します。
 * [[m:Process::RLIM_SAVED_CUR]]
 * [[m:Process::RLIM_SAVED_MAX]]

以下の例は RLIMIT_CORE の制限を hard limit (max limit) まで引き上げ、可能なら core を残すようにします。

  Process.setrlimit(Process::RLIMIT_CORE, 
                    Process.getrlimit(Process::RLIMIT_CORE)[1])

@see [[man:setrlimit(2)]]

#@end

--- egid    -> Integer

カレントプロセスの実効グループ ID を整数で返します。

@see [[man:getegid(2)]]

--- egid=(gid)

カレントプロセスの実効グループ ID を gid に設定します。

動作の詳細はプラットフォームに依存します。
実効グループ ID 以外のグループ ID も変更されるかも知れません。

@param gid 実効グループ ID を整数で指定します。

@raise Errno::EXXX 権限がない場合に発生します。

@raise NotImplementedError メソッドが現在のプラットフォームで実装されていない場合に発生します。

@see [[m:Process::GID.#eid=]]

--- euid        -> Integer

カレントプロセスの実効ユーザ ID を整数で返します。

@see [[man:geteuid(2)]]

--- euid=(uid)

カレントプロセスの実効ユーザ ID を uid に設定します。

動作の詳細はプラットフォームに依存します。
実効ユーザ ID 以外のユーザ ID も変更されるかも知れません。

@param uid 実効ユーザ ID を整数で指定します。

@raise Errno::EXXX 権限がない場合に発生します。

@raise NotImplementedError メソッドが現在のプラットフォームで実装されていない場合に発生します。

@see [[m:Process::UID.#eid=]]

--- gid        -> Integer

カレントプロセスの実グループ ID を返します。

@see [[man:getgid(2)]]

--- gid=(gid)

カレントプロセスの実グループ ID を gid に設定します。

動作の詳細はプラットフォームに依存します。
実グループ ID 以外のグループ ID も変更されるかも知れません。

@param gid 実グループ ID を整数で指定します。

@raise Errno::EXXX 権限がない場合に発生します。

@raise NotImplementedError メソッドが現在のプラットフォームで実装されていない場合に発生します。

@see [[c:Process::GID]]

--- groups     -> [Integer]

補助グループ ID の配列を返します(実効グループ ID を含むかも知れません)。

返される配列の最大要素数は [[m:Process.#maxgroups]] です。

@raise Errno::EXXX [[m:Process.#maxgroups]] が実際に返される補助グループ ID の
                   数よりも少ない値を設定していると発生します。

@raise NotImplementedError メソッドが現在のプラットフォームで実装されていない場合に発生します。

@see [[man:getgroups(2)]]

--- groups=(gids)

補助グループを設定します。

root だけがこのメソッドを呼ぶことができます。

@param gids 補助グループ ID の配列を指定します。補助グループ ID は整数かグループ名を表す文字列です。

@raise ArgumentError 設定する補助グループ ID の数が [[m:Process.#maxgroups]] の
                     数を越えている場合に発生します。

@raise Errno::EXXX 権限がない場合に発生します。

@raise NotImplementedError メソッドが現在のプラットフォームで実装されていない場合に発生します。

@see [[man:setgroups(2)]]

--- maxgroups        -> Integer
--- maxgroups=(num)

設定できる補助グループ ID の数を指定します。

実際に返される補助グループ ID の数よりも少ない値を設定していると、
[[m:Process.#groups]] で例外が発生します。

@param num 整数を指定します。

@raise NotImplementedError メソッドが現在のプラットフォームで実装されていない場合に発生します。

--- pid    -> Integer

カレントプロセスのプロセス ID を返します。変数 [[m:$$]]
の値と同じです。

@see [[man:getpid(2)]]

--- ppid    -> Integer

親プロセスのプロセス ID を返します。UNIX では実際の親プロセスが終
了した後は ppid は 1 (initの pid)になります。

@see [[man:getppid(2)]]

--- uid        -> Integer

プロセスの実ユーザ ID を返します。

@see [[man:getuid(2)]]

--- uid=(id)

プロセスの実ユーザ ID を id に設定します。

動作の詳細はプラットフォームに依存します。
実ユーザ ID 以外のユーザ ID も変更されるかも知れません。

@param id 実ユーザ ID を整数で指定します。

@raise Errno::EXXX 権限がない場合に発生します。

@raise NotImplementedError メソッドが現在のプラットフォームで実装されていない場合に発生します。

@see [[c:Process::UID]]

--- getpgid(pid)   -> Integer

プロセス ID が pid であるプロセスのプロセスグループ ID を整数で返します。

@param pid プロセス ID を整数で指定します。0 の時はカレントプロセス ID を指定したのと同じです。

@raise Errno::EXXX プロセスグループの取得に失敗した場合に発生します。

@raise NotImplementedError メソッドが現在のプラットフォームで実装されていない場合に発生します。

@see [[man:getpgid(2)]]

--- getpgrp            -> Integer

現在のプロセスのプロセスグループ ID を整数で返します。

@raise Errno::EXXX プロセスグループの取得に失敗した場合に発生します。

@raise NotImplementedError メソッドが現在のプラットフォームで実装されていない場合に発生します。

@see [[man:getpgrp(2)]]

--- getpriority(which, who)    -> Integer

which に従いプロセス、プロセスグループ、ユーザのいずれかの現在のプライオリティを整数で返します。

@param which プライオリティの種類を次の定数で指定します。 [[m:Process::PRIO_PROCESS]],
             [[m:Process::PRIO_PGRP]], [[m:Process::PRIO_USER]]。

@param who which の値にしたがってプロセス ID、プロセスグループ ID、ユーザ ID のいずれかを整数で指定します。

@raise Errno::EXXX プライオリティの取得に失敗した場合に発生します。

@raise NotImplementedError メソッドが現在のプラットフォームで実装されていない場合に発生します。

@see [[man:getpriority(2)]]

#@since 1.8.0
--- initgroups(user, group)    -> [Integer]

user が属するグループのリストを更新し、group をそのリストに加えます。

このメソッドを呼ぶには root 権限が必要です。

@param user ユーザ名を表す文字列で指定します。

@param group ユーザグループ ID を整数で指定します。

@raise NotImplementedError メソッドが現在のプラットフォームで実装されていない場合に発生します。

#@end

--- kill(signal, pid, *rest)    -> Integer

pid で指定されたプロセスにシグナルを送ります。signal
はシグナル番号か名前(文字列または[[c:Symbol]])で指定します。
全てのシグナル送信に成功した場合、指定した pid の総数を返します。

@param signal シグナルを整数かその名前の文字列で指定します。負の値を持つシグナル(あるいはシグナル名の前に-)を指定すると、プロセスではなくプロセスグループにシグナルを送ります。

@param pid シグナルを送りたいプロセスのプロセス ID を整数で指定します。ただし、0 以下の場合は以下のような意味になります。

 * 0 の場合はカレントプロセスのプロセスグループにシグナルを送ります。
 * -1 の場合はシステム上の全てのプロセスにシグナルを送ります。
 * それ以外の負の整数を与えるとプロセスではなくプロセスグループにシグナルを送ります。
   負の整数はプロセスグループ ID にマイナスを付けたものと見なされます。

@param rest プロセス ID を整数で指定します。

@raise ArgumentError 存在しないシグナルを指定した場合に発生します。

@raise Errno::EXXX シグナル送信に失敗した場合に発生します。

#@#なお、Windows ([[unknown:mswin32]], [[unknown:mingw32]])では、INT
#@#ILL FPE SEGV TERM BREAK ABRT しか指定できません。((<ruby 1.7 feature>))
#@#KILL も指定できます

@see [[m:Kernel.#trap]], [[man:kill(2)]]

#@if (version < "1.8.0")
--- setpgrp(pid, pgrp)    -> 0
#@end
--- setpgid(pid, pgrp)    -> 0

プロセス ID が pid であるプロセスのプロセスグループを pgrp に設定します。

@param pid プロセス ID を整数で指定します。pid が 0 の時はカレントプロセスの ID を指定したのと同じです。
           プロセスグループの設定に成功した場合は 0 を返します。

@param pgrp プロセスグループ ID を整数で指定します。pgrp が 0 の時は pid を指定したのと同じです。

@raise Errno::EXXX プロセスグループの設定に失敗した場合に発生します。

@raise NotImplementedError メソッドが現在のプラットフォームで実装されていない場合に発生します。

@see [[man:setpgid(2)]]

#@since 1.8.0
--- setpgrp    -> 0

カレントプロセスの ID と同じ ID をもつプロセスグループを作成し、カレントプロセスをそのリーダーにします。
[[m:Process.#setpgid]](0, 0) と同じです。

@raise Errno::EXXX プロセスグループの設定に失敗した場合に発生します。

@raise NotImplementedError メソッドが現在のプラットフォームで実装されていない場合に発生します。

 fork do
   p [Process.pid, Process.getpgrp]
   p Process.setpgrp
   p [Process.pid, Process.getpgrp]
 end
 Process.wait
 #=>
   [3427, 3426]
   0
   [3427, 3427]

@see [[man:setpgrp(2)]]
#@end

--- setpriority(which, who, prio)    -> 0

プロセス、プロセスグループ、
ユーザのいずれかの現在のプライオリティを設定します
。プライオリティの設定に成功した場合は 0 を返します。

@param which プライオリティを設定する対象の種類を以下の定数のいずれかで指定します。

 * [[m:Process::PRIO_PROCESS]]
 * [[m:Process::PRIO_PGRP]]
 * [[m:Process::PRIO_USER]] 

@param who which の値にしたがってプロセス ID、プロセスグループ ID、ユーザ ID のいずれかを整数で指定します。

@param prio プライオリティを -20 から 20 までの整数で設定します。小さな値はプライオリティが高いことを意味し、大きな値はプライオリティが低いことを意味します。

@raise Errno::EXXX プライオリティの設定に失敗した場合に発生します。

@raise NotImplementedError メソッドが現在のプラットフォームで実装されていない場合に発生します。

以下の例は呼び出したプロセス自身のプライオリティを 10 に下げます。
すでに 10 よりもプライオリティが低く、
Errno::EACCES となった場合には無視して実行を続けます。

  begin
    Process.setpriority(Process::PRIO_PROCESS, 0, 10)
  rescue Errno::EACCES
  end

@see [[man:setpriority(2)]]

--- setsid    -> Integer

新しいセッションを作成して、tty を切り離します。デーモンを簡単に作
ることができます。セッション ID を返します。

@raise Errno::EXXX セッションの作成に失敗した場合に発生します。

@raise NotImplementedError メソッドが現在のプラットフォームで実装されていない場合に発生します。

@see [[man:setsid(2)]]

#@since 2.0.0
--- getsid(pid = 0) -> Integer

引数 pid で指定されたプロセスのセッション ID を返します。

@param pid プロセス ID を整数で指定します。省略した場合、0 を指定した場
           合は現在のプロセスの ID を指定した場合と同じ動作になります。

@raise NotImplementedError メソッドが現在のプラットフォームで実装されて
                           いない場合に発生します。

  Process.getsid()              # => 27422
  Process.getsid(0)             # => 27422
  Process.getsid(Process.pid()) # => 27422

@see [[man:getsid(2)]]
#@end

#@since 1.8.0
--- times    -> Struct::Tms

自身のプロセスとその子プロセスが消費したユーザ/システム CPU 時間の積算を
[[c:Struct::Tms]] オブジェクトで返します。
時間の単位は秒で、浮動小数点数で与えられます。

@raise NotImplementedError メソッドが現在のプラットフォームで実装されていない場合に発生します。

@see [[c:Struct::Tms]] 
#@end

--- wait    -> Integer
--- wait2   -> [Integer, Process::Status]

子プロセスのうちのひとつが終了するまで待ち、終了した子プロセスの pid を返します。
#@since 1.8.0
wait2 は子プロセスの pid と終了ステータスを表す [[c:Process::Status]] オブジェクトの配列を返します。
#@else
wait2 は子プロセスの pid と終了ステータスを表す [[m:$?]] の配列を返します。
#@end

#@since 1.8.0
[[m:$?]] に終了した子プロセスの [[c:Process::Status]] オブジェクトがセットされます。
#@end

#@since 1.8.0
#@#$? は [[c:Process::Status]] オブジェクトです。
#@#Process.wait と Process.waitpid の実体は同じものになりました。
#@#Process.wait2 と Process.waitpid2 の実体は同じものになりました。
#@end

@raise Errno::ECHILD 子プロセスが一つもなければ発生します。

#@since 1.8.0
 pid = fork{ sleep 1 }
 Process.wait2 #=> [2756, #<Process::Status: pid=2756,exited(0)>]
#@end

@see [[man:wait(2)]]

#@since 1.8.0
--- waitall    -> [[Integer, Process::Status]]

全ての子プロセスが終了するのを待ちます。
終了した子プロセスの pid と終了ステータス
([[c:Process::Status]]) の配列の配列を返します。
子プロセスがいない状態でこのメソッドを呼び出すと空の配列を返します。

#@since 1.8.0
[[m:$?]] には最後に終了した子プロセスの [[c:Process::Status]] オブジェクトが設定されます。
#@else
[[m:$?]] には最後に終了した子プロセスの終了ステータスが設定されます。
#@end

    2.times {|n|
      Process.fork() { exit n }
    }
    p Process.waitall
    #=> [[2766, #<Process::Status: pid=2766,exited(1)>], [2765, #<Process::Status: pid=2765,exited(1)>]]
#@end

--- waitpid(pid, flags = 0)    -> Integer | nil
--- waitpid2(pid, flags = 0)   -> [Integer, Process::Status] | nil

pid で指定される特定の子プロセスの終了を待ち、そのプロセスが
終了した時に pid を返します。
#@since 1.8.0
waitpid2 は pid と [[c:Process::Status]] オブジェクトの配列を返します。
#@else
waitpid2 は pid と [[m:$?]] の配列を返します。
#@end
ノンブロッキングモードで子プロセスがまだ終了していない時には
nil を返します。

#@since 1.8.0
[[m:$?]] に終了した子プロセスの [[c:Process::Status]] オブジェクトがセットされます。
#@end

#@since 1.8.0
#@#Ruby 1.8.0 からは $? は [[c:Process::Status]] オブジェクトです。
#@#Process.wait と Process.waitpid の実体は同じものになりました。
#@#Process.wait2 と Process.waitpid2 の実体は同じものになりました。
#@end

@param pid 子プロセスのプロセス ID を整数で指定します。

@param flags Process モジュールの定数 [[m:Process::WNOHANG]](ノンブロッキングモード)と
             [[m:Process::WUNTRACED]] の論理和を指定します。省略したときの値は 0 です。
             ノンブロッキングモードで子プロセスがまだ終了していない時には
             nil を返します。[[man:waitpid(2)]] か [[man:wait4(2)]] の実装されていないマシンでは
             flags はいつも nil または 0 を指定する必要があります。

@raise Errno::ECHILD 子プロセスが存在しない場合に発生します。

@see [[man:waitpid(2)]]

#@since 1.9.1
--- daemon(nochdir = nil, noclose = nil)    -> 0

プロセスから制御端末を切り離し、
バックグラウンドにまわってデーモンとして動作させます。

カレントディレクトリを / に移動します。
ただし nochdir に真を指定したときにはこの動作は抑制され、
カレントディレクトリは移動しません。

標準入力・標準出力・標準エラー出力を /dev/null にリダイレクトします。
ただし noclose に真を指定したときにはこの動作は抑制され、
リダイレクトは行なわれません。

#@if (version == "1.9.1")
[[man:daemon(2)]] がなくて [[man:fork(2)]] がある環境では失敗した場合に
Errno::EXXX が発生せず -1 が返ってきます。
#@end

@param nochdir true を指定した場合、カレントディレクトリを移動しません。

@param noclose true を指定した場合、標準入力・標準出力・標準エラー出力を変更しません。

@raise NotImplementedError メソッドが現在のプラットフォームで実装されていない場合に発生します。
@raise Errno::EXXX 失敗した場合に発生します。
#@end
#@since 1.8.0
--- detach(pid)    -> Thread

子プロセス pid の終了を監視するスレッドを生成して返します。
#@since "1.8.5"
生成したスレッドは子プロセスが終了した後に終了ステータス ([[c:Process::Status]]) を返します。
#@else
生成したスレッドは子プロセスが終了した後に nil で終了します。
#@end
指定した子プロセスが存在しなければ即座に nil で終了します。

@param pid 子スレッドのプロセス ID を整数で指定します。

@raise NotImplementedError メソッドが現在のプラットフォームで実装されていない場合に発生します。

    pid = fork {
      # child
      sleep 3
    }

#@since "1.8.5"
    p pid # => 7762
#@end
    th = Process.detach(pid)
    p th.value
#@since "1.8.5"
    # => #<Process::Status: pid 7762 exit 0>
#@else
    # => nil
#@end

#@end

== Constants

--- PRIO_PROCESS -> Fixnum

対象とするプライオリティがプロセスプライオリティであることを表す定数です。

[[m:Process.#getpriority]] または [[m:Process.#setpriority]] で使われます。

--- PRIO_PGRP -> Fixnum

対象とするプライオリティがプロセスグループプライオリティであることを表す定数です。

[[m:Process.#getpriority]] または [[m:Process.#setpriority]] で使われます。

--- PRIO_USER -> Fixnum

対象とするプライオリティがユーザプライオリティであることを表す定数です。

[[m:Process.#getpriority]] または [[m:Process.#setpriority]] で使われます。

--- RLIMIT_AS -> Fixnum

リソースの種類がプロセスの仮想メモリサイズであることを示す定数です。

[[m:Process.#getrlimit]]、[[m:Process.#setrlimit]] で使われます。
システムによっては定義されていません。

--- RLIMIT_CORE -> Fixnum

リソースの種類が core ファイルのサイズであることを示す定数です。

[[m:Process.#getrlimit]]、[[m:Process.#setrlimit]] で使われます。
システムによっては定義されていません。

--- RLIMIT_CPU -> Fixnum

リソースの種類がプロセスの CPU 時間であることを示す定数です。

[[m:Process.#getrlimit]]、[[m:Process.#setrlimit]] で使われます。
システムによっては定義されていません。

--- RLIMIT_DATA -> Fixnum

リソースの種類がプロセスのデータ領域のサイズであることを示す定数です。

[[m:Process.#getrlimit]]、[[m:Process.#setrlimit]] で使われます。
システムによっては定義されていません。

--- RLIMIT_FSIZE -> Fixnum

リソースの種類がプロセスが生成するファイルのサイズであることを示す定数です。

[[m:Process.#getrlimit]]、[[m:Process.#setrlimit]] で使われます。
システムによっては定義されていません。

--- RLIMIT_MEMLOCK -> Fixnum

リソースの種類が [[man:mlock(2)]] でロックできるトータルのサイズであることを示す定数です。

[[m:Process.#getrlimit]]、[[m:Process.#setrlimit]] で使われます。
システムによっては定義されていません。

--- RLIMIT_NOFILE -> Fixnum

リソースの種類がプロセスがオープンできるファイルの数であることを示す定数です。

[[m:Process.#getrlimit]]、[[m:Process.#setrlimit]] で使われます。
システムによっては定義されていません。

--- RLIMIT_NPROC -> Fixnum

リソースの種類がユーザのプロセスの最大数であることを示す定数です。

[[m:Process.#getrlimit]]、[[m:Process.#setrlimit]] で使われます。
システムによっては定義されていません。

--- RLIMIT_RSS -> Fixnum

リソースの種類が使用できる実メモリの最大サイズであることを示す定数です。

[[m:Process.#getrlimit]]、[[m:Process.#setrlimit]] で使われます。
システムによっては定義されていません。

--- RLIMIT_SBSIZE -> Fixnum

リソースの種類がソケットバッファのサイズであることを示す定数です。

[[m:Process.#getrlimit]]、[[m:Process.#setrlimit]] で使われます。
システムによっては定義されていません。

--- RLIMIT_STACK -> Fixnum

リソースの種類がプロセスのスタック領域のサイズであることを示す定数です。

[[m:Process.#getrlimit]]、[[m:Process.#setrlimit]] で使われます。
システムによっては定義されていません。

--- RLIM_INFINITY -> Integer

リソースに制限がないことを意味する定数です。

[[m:Process.#getrlimit]]、[[m:Process.#setrlimit]] で使われます。


--- RLIM_SAVED_CUR -> Integer

[[m:Process.#getrlimit]], [[m:Process.#setrlimit]] で使われます。詳しくは [[man:setrlimit(2)]] を参照して下さい。

--- RLIM_SAVED_MAX -> Integer

[[m:Process.#getrlimit]], [[m:Process.#setrlimit]] で使われます。詳しくは [[man:setrlimit(2)]] を参照して下さい。

--- WNOHANG -> Fixnum

[[m:Process.#waitpid]] の第二引数に指定するフラグです。
終了した子プロセスがない時でも waitpid がブロックしません。

--- WUNTRACED -> Fixnum

[[m:Process.#waitpid]] の第二引数に指定するフラグです。
このフラグが指定された場合、waitpid は停止しているだけで
終了していない子プロセスのプロセス ID も返すようになります。
trace されている子プロセスの ID は返しません。

 include Process
 pid = fork{ Process.kill('SIGSTOP', Process.pid) }
 p pid                          #=> 4336
 p waitpid2(pid, WUNTRACED)     #=> [4336, #<Process::Status: pid=4336,stopped(SIGSTOP=19)>]

@see [[man:waitpid(2)]]
