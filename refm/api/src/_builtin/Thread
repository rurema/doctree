= class Thread < Object

スレッドを表すクラスです。スレッドとはメモリ空間を共有して同時に実行される制御の流れです。
Thread を使うことで並行プログラミングが可能になります。

#@include(thread.inc)

== Class Methods
--- abort_on_exception             -> bool
--- abort_on_exception=(newstate)

真の時は、いずれかのスレッドが例外によって終了した時に、インタプリタ
全体を中断させます。false の場合、あるスレッドで起こった例外は、[[m:Thread#join]]
などで検出されない限りそのスレッドだけをなにも警告を出さずに終了させます。

デフォルトは false です。

[[ref:c:Thread#exception]]を参照してください。

@param newstate スレッド実行中に例外発生した場合、インタプリタ全体を終了させるかどうかを true か false で指定します。

#@since 2.4.0
--- report_on_exception             -> bool
--- report_on_exception=(newstate)

真の時は、いずれかのスレッドが例外によって終了した時に、その内容を $stderr に報告します。

#@since 2.5.0
デフォルトは true です。
#@else
デフォルトは false です。
#@end

  Thread.new { 1.times { raise } }

は $stderr に以下のように出力します:

  #<Thread:...> terminated with exception (report_on_exception is true):
  Traceback (most recent call last):
          2: from -e:1:in `block in <main>'
          1: from -e:1:in `times'

これによってスレッドのエラーを早期に捕捉できるようになります。
いくつかのケースでは、この出力を望まないかもしれません。
出力を抑制するには複数の方法があります:

 * 例外が意図したものではない場合、原因を修正して例外が発生しないようにする方法が最善です。
 * 例外が意図したものの場合、例外が発生する場所により近い場所で rescue して、
   その例外でスレッドが終了しないようにするのがより良い方法です。
 * [[m:Thread#join]] や [[m:Thread#value]] でそのスレッドの終了を待つことが保証できるなら、
   スレッド開始時に Thread.current.report_on_exception = false でレポートを無効化しても
   安全です。しかし、この場合、例外をハンドルするのが遅れたり、親スレッドがブロックされていて
   終了を待つことができなかったりするかもしれません。

スレッドごとに設定する方法は [[m:Thread#report_on_exception=]] を参照してください。

@param newstate スレッド実行中に例外発生した場合、その内容を報告するかどうかを true か false で指定します。
#@end
#@until 1.9.1
--- critical             -> bool
--- critical=(newstate)

真である間、スレッドの切替えを行いません。

カレントスレッドが停止状態になった場合や、シグナルに割り込まれた場合には、
自動的に false になります。
ただし、[[m:Thread.new]] によりスレッドを生成した場合には、critical 
の値に関わらず そのスレッドは実行されます。
また、[[m:Thread.pass]] により明示的に切替えることもできます。

デフォルトは false です。

注意: I/O や GC、拡張ライブラリがからむとこのフラグは無視さ
れることもあります。排他制御を行うにはこのメソッドに頼らず
[[c:Mutex]] や [[c:Monitor]] を使うべきです。

@param newstate スレッドの切替えを許すかどうかを、true か false で指定します。
#@end

--- current    -> Thread

現在実行中のスレッド(カレントスレッド)を返します。

  p Thread.current #=> #<Thread:0x4022e6fc run>

--- exit    -> ()

カレントスレッドに対して [[m:Thread#exit]] を呼びます。

#@#noexample Thread#exitを参照

--- kill(thread)    -> Thread

指定したスレッド thread に対して [[m:Thread#exit]] を呼びます。終了したスレッドを返します。

@param thread 終了したい Thread オブジェクトを指定します。

  th = Thread.new do
  end
    
  p Thread.kill(th)     #=> #<Thread:0x40221bc8 dead>

--- list    -> [Thread]

#@since 1.8.0
全ての生きているスレッドを含む配列を生成して返します。aborting 状態であるスレッド
も要素に含まれます。
#@else
生きているスレッドのうち、実行中(run)または停止中(stop)のスレッド
の配列を返します。
#@end

  Thread.new do
    sleep 
  end
  sleep 0.1
  
  p Thread.list   #=> [#<Thread:0x40377a54 sleep>, #<Thread:0x4022e6fc run>]

--- main    -> Thread

メインスレッドを返します。

  p Thread.main #=> #<Thread:0x4022e6fc run>

--- start(*arg) {|*arg| ... }       -> Thread
--- fork(*arg) {|*arg| ... }        -> Thread

スレッドを生成して、ブロックの評価を開始します。
生成したスレッドを返します。

基本的に [[m:Thread.new]] と同じですが、
new メソッドと違い initialize メソッドを呼びません。

@param arg 引数 arg はそのままブロックに渡されます。スレッドの開始と同時にその
           スレッド固有のローカル変数に値を渡すために使用します。

@raise ThreadError 現在のスレッドが属する [[c:ThreadGroup]] が freeze されている場合に発生します。またブロックを与えられずに呼ばれた場合にも発生します。


注意:

例えば、以下のコードは間違いです。スレッドの実行が開始される前に
変数 i が書き変わる可能性があるからです。

  for i in 1..5
     Thread.start { p i }
  end

上の例は以下のように書き直すべきです。

  for i in 1..5
     Thread.start(i) {|t| p t }
  end

--- new(*arg) {|*arg| ... }         -> Thread

スレッドを生成して、ブロックの評価を開始します。
生成したスレッドを返します。

@param arg 引数 arg はそのままブロックに渡されます。スレッドの開始と同時にその
           スレッド固有のローカル変数に値を渡すために使用します。

@raise ThreadError 現在のスレッドが属する [[c:ThreadGroup]] が freeze されている場合に発生します。またブロックを与えられずに呼ばれた場合にも発生します。

注意:

例えば、以下のコードは間違いです。スレッドの実行が開始される前に
変数 i が書き変わる可能性があるからです。

  for i in 1..5
     Thread.new { p i }
  end

上の例は以下のように書き直すべきです。

  for i in 1..5
     Thread.new(i) {|t| p t }
  end

--- pass    -> nil

他のスレッドに実行権を譲ります。実行中のスレッドの状態を変えずに、
他の実行可能状態のスレッドに制御を移します。

 Thread.new do
   (1..3).each{|i|
     p i
     Thread.pass
   }
   exit
 end
 
 loop do
   Thread.pass
   p :main
 end

 #=>
 1
 :main
 2
 :main
 3
 :main

--- stop     -> nil

他のスレッドから [[m:Thread#run]] メソッドで再起動されるまで、カレ
ントスレッドの実行を停止します。

#@samplecode 例
a = Thread.new { print "a"; Thread.stop; print "c" }
sleep 0.1 while a.status!='sleep'
print "b"
a.run
a.join
# => "abc"
#@end

@see [[m:Thread#run]], [[m:Thread#wakeup]]

#@since 1.9.1
--- exclusive { ... }  -> object
#@# 1.8 以前は ../thread.rb にあります。
VM グローバルの Mutex をロックし、ブロックを実行します。

このクラスメソッドの挙動は 1.8 以前とは違います。
#@since 2.6.0
Thread.exclusive は VM グローバルの Mutex の
#@else
Thread.exclusive は VM グローバルの [[m:Thread::MUTEX_FOR_THREAD_EXCLUSIVE]] の
#@end
synchronize を呼び出しているだけで、Thread.exclusive していないスレッドは動きます。
#@since 2.3.0
[[c:Thread::Mutex]] や [[c:Monitor]] などの他の排他制御の方法を検討してください。
#@else
[[c:Mutex]] や [[c:Monitor]] などの他の排他制御の方法を検討してください。
#@end

--- DEBUG -> Integer

スレッドのデバッグレベルを返します。

使用するためには、THREAD_DEBUG を -1 にして Ruby をコンパイルする必要が
あります。

--- DEBUG=(val)

スレッドのデバッグレベルを val に設定します。

使用するためには、THREAD_DEBUG を -1 にして Ruby をコンパイルする必要が
あります。

#@end

#@since 2.0.0
#@# 参考: [[ruby-dev:45341]]
--- pending_interrupt?(error = nil) -> bool

非同期割り込みのキューが空かどうかを返します。

[[m:Thread.handle_interrupt]] は非同期割り込みの発生を延期させるのに使
用しますが、本メソッドは任意の非同期割り込みが存在するかどうかを確認す
るのに使用します。

本メソッドが true を返した場合、[[m:Thread.handle_interrupt]] で例外の
発生を延期するブロックを終了すると延期させられていた例外を発生させるこ
とができます。

@param error 対象の例外クラスを指定します。省略した場合は全ての例外を対
             象に確認を行います。

例: 延期させられていた例外をただちに発生させる。

  def Thread.kick_interrupt_immediately
    Thread.handle_interrupt(Object => :immediate) {
      Thread.pass
    }
  end

=== 使い方

  th = Thread.new{
    Thread.handle_interrupt(RuntimeError => :on_blocking){
      while true
        ...
        # ここまでで割り込みが発生しても安全な状態になった。
        if Thread.pending_interrupt?
          Thread.handle_interrupt(Object => :immediate){}
        end
        ...
      end
    }
  }
  ...
  th.raise # スレッド停止。

この例は以下のように記述する事もできます。

  flag = true
  th = Thread.new{
    Thread.handle_interrupt(RuntimeError => :on_blocking){
      while true
        ...
        # ここまでで割り込みが発生しても安全な状態になった。
        break if flag == false
        ...
      end
    }
  }
  ...
  flag = false # スレッド停止

@see [[m:Thread#pending_interrupt?]], [[m:Thread.handle_interrupt]]

--- handle_interrupt(hash) { ... } -> object

スレッドの割り込みのタイミングを引数で指定した内容に変更してブロックを
実行します。

「割り込み」とは、非同期イベントや [[m:Thread#raise]] や
[[m:Thread#kill]]、[[m:Signal.#trap]](未サポート)、メインスレッドの終了
(メインスレッドが終了すると、他のスレッドも終了されます)を意味します。

@param hash 例外クラスがキー、割り込みのタイミングを指定する
            [[c:Symbol]] が値の [[c:Hash]] を指定します。
            値の内容は以下のいずれかです。

: :immediate

  すぐに割り込みます。

: :on_blocking

  ブロッキング処理(後述)の間は割り込みが発生します。

: :never

  まったく割り込みません。

「ブロッキング処理」とは、読み込み処理や書き込み処理のような呼び出し元
のスレッドをブロックするような処理を意味します。CRuby の実装では、GVL
を解放して実行する処理は全てブロッキング処理に含まれます。

また、マスクされた非同期割り込みは再度有効にされるまで延期されます。本
メソッドは [[man:sigprocmask(3)]] に似ています。

@return ブロックの評価結果を返します。

@raise ArgumentError ブロックを指定しなかった場合に発生します。

=== 注意

非同期割り込みの利用は難しいため、スレッド間での通信を実現する場合はま
ずはキューのような他の方法を検討してください。それでも非同期割り込みを
利用する場合は本メソッドをよく理解してから利用してください。

=== 使い方

例:[[c:Thread#raise]] 発生のタイミングを制御する例

  th = Thread.new do
    Thead.handle_interrupt(RuntimeError => :never) {
      begin
        # 安全にリソースの割り当てが可能
        Thread.handle_interrupt(RuntimeError => :immediate) {
          # ...
        }
      ensure
        # 安全にリソースの解放が可能
      end
    }
  end
  Thread.pass
  # ...
  th.raise "stop"

[[c:RuntimeError]] を無視(延期)している間はリソースの割り当てや ensure
節でリソースの解放を安全に行う事ができます。

==== TimeoutError 対策

例:[[c:TimeoutError]] 発生のタイミングを制御する例

  require 'timeout'
  Thread.handle_interrupt(TimeoutError => :never) {
    timeout(10){
      # TimeoutError => :never の指定により、ここでは TimeoutError が発生しない。
      Thread.handle_interrupt(TimeoutError => :on_blocking) {
        # :on_blocking な処理は TimeoutError が発生し得る。
      }
      # TimeoutError => :never の指定により、ここでは TimeoutError が発生しない。
    }
  }

この例を ensure 節での [[c:TimeoutError]] 発生に応用する事でリソースリー
クに備える事ができます。[[m:Timeout.#timeout]] はスレッドを使って実装さ
れているため、Thread.handle_interrupt による制御が有効です。

==== Stack control settings

It's possible to stack multiple levels of ::handle_interrupt blocks in order
to control more than one ExceptionClass and TimingSymbol at a time.

  Thread.handle_interrupt(FooError => :never) {
    Thread.handle_interrupt(BarError => :never) {
       # FooError and BarError are prohibited.
    }
  }

==== 例外クラスの継承関係

本メソッドでは引数 hash のキーに指定した例外クラスの全てのサブクラスが
処理の対象になります。

例:

  Thread.handle_interrupt(Exception => :never) {
    # Exception を継承する全ての例外クラスの例外の発生を延期。
  }

@see [[m:Thread.pending_interrupt?]], [[m:Thread#pending_interrupt?]]
#@end

== Instance Methods

--- [](name)    -> object | nil

name に対応したスレッドに固有のデータを取り出します。
name に対応するスレッド固有データがなければ nil を返し
ます。

@param name スレッド固有データのキーを文字列か [[c:Symbol]] で指定します。

#@samplecode 例
[
  Thread.new { Thread.current["name"] = "A" },
  Thread.new { Thread.current[:name]  = "B" },
  Thread.new { Thread.current["name"] = "C" }
].each do |th|
  th.join
  puts "#{th.inspect}: #{th[:name]}"
end

# => #<Thread:0x00000002a54220 dead>: A
# => #<Thread:0x00000002a541a8 dead>: B
# => #<Thread:0x00000002a54130 dead>: C
#@end

#@since 2.5.0
@see [[m:Thread#fetch]]
#@end
--- []=(name,val)

val を name に対応するスレッド固有のデータとして格納します。

@param name スレッド固有データのキーを文字列か [[c:Symbol]] で指定します。文字列を指定した場合は [[m:String#to_sym]] によりシンボルに変換されます。

@param val スレッド固有データを指定します。nil を指定するとそのスレッド固有データは削除されます。

#@#noexample Thread#[]を参照

@see [[m:Thread#[] ]]

#@since 2.5.0
--- fetch(name, default = nil) {|name| ... } -> object

name に関連づけられたスレッドに固有のデータを返します。
name に対応するスレッド固有データがない時には、引数 default が
与えられていればその値を、ブロックが与えられていれば
そのブロックを評価した値を返します。

@param name スレッド固有データのキーを文字列か [[c:Symbol]] で指定します。
@param default name に対応するスレッド固有データがない時の返り値を指定します。
@raise KeyError 引数defaultもブロックも与えられてない時、
                name に対応するスレッド固有データがないと発生します。

@see [[m:Thread#[] ]]
#@end

--- abort_on_exception               -> bool
--- abort_on_exception=(newstate)

真の場合、そのスレッドが例外によって終了した時に、インタプリタ
全体を中断させます。false の場合、あるスレッドで起こった例
外は、[[m:Thread#join]] などで検出されない限りそのスレッ
ドだけをなにも警告を出さずに終了させます。

デフォルトは偽です。[[ref:c:Thread#exception]]を参照してください。

@param newstate 自身を実行中に例外発生した場合、インタプリタ全体を終了させるかどうかを true か false で指定します。

#@since 2.4.0
--- report_on_exception               -> bool
--- report_on_exception=(newstate)

真の場合、そのスレッドが例外によって終了した時に、その内容を $stderr に報告します。

デフォルトはスレッド作成時の [[m:Thread.report_on_exception]] です。

@param newstate スレッド実行中に例外発生した場合、その内容を報告するかどうかを true か false で指定します。

#@samplecode 例
a = Thread.new{ Thread.stop; raise }
a.report_on_exception = true
a.report_on_exception   # => true
a.run
# => #<Thread:0x00007fc3f48c7908@(irb):1 run> terminated with exception (report_on_exception is true):
#    Traceback (most recent call last):
#    (irb):1:in `block in irb_binding': unhandled exception
#    #<Thread:0x00007fc3f48c7908@(irb):1 dead>
b = Thread.new{ Thread.stop; raise }
b.report_on_exception = false
b.run   # => #<Thread:0x00007fc3f48aefc0@(irb):4 dead>
#@end

@see [[m:Thread.report_on_exception]]
#@end

--- alive?     -> bool

スレッドが「生きている」時、true を返します。

例:
  thr = Thread.new { }
  thr.join                # => #<Thread:0x401b3fb0 dead>
  Thread.current.alive?   # => true
  thr.alive?              # => false

[[m:Thread#status]] が真を返すなら、このメソッドも真です。

@see [[m:Thread#status]], [[m:Thread#stop?]]

--- exit         -> self
--- kill         -> self
--- terminate    -> self

スレッドの実行を終了させます。終了時に ensure 節が実行されます。

ただし、スレッドは終了処理中(aborting)にはなりますが、
直ちに終了するとは限りません。すでに終了している場合は何もしません。このメソッドにより
終了したスレッドの [[m:Thread#value]] の返り値は不定です。
自身がメインスレッドであるか最後のスレッドである場合は、プロセスを [[m:Kernel.#exit]](0) 
により終了します。

[[m:Kernel.#exit]] と違い例外  [[c:SystemExit]] を発生しません。

  th1 = Thread.new do
    begin
      sleep 10
    ensure
      p "this will be displayed"
    end
  end

  sleep 0.1
  th1.kill

  #=> "this will be displayed"

#@since 1.9.1
@see [[m:Kernel.#exit]], [[m:Kernel.#exit!]]
#@else
@see [[m:Thread#exit!]], [[m:Kernel.#exit]], [[m:Kernel.#exit!]]
#@end

#@if("1.8.6" <= version and version < "1.9.1")
--- exit!         -> self
--- kill!         -> self
--- terminate!    -> self

ensure 節を実行せずにスレッドの実行を終了させます。

ただし、スレッドは終了処理中(aborting)にはなりますが、
直ちに終了するとは限りません。すでに終了している場合は何もしません。このメソッドにより
終了したスレッドの [[m:Thread#value]] の返り値は不定です。
自身がメインスレッドであるか最後のスレッドである場合は、プロセスを [[m:Kernel.#exit]](0) 
により終了します。

  th1 = Thread.new do
    begin
      sleep 10
    ensure
      p "th1: this will be displayed"
    end
  end
  th2 = Thread.new do
    begin
      sleep 10
    ensure
      p "th2: this will NOT be displayed"
    end
  end
  
  th1.kill
  th2.kill!

  #=> "th1: this will be displayed"

@see [[m:Thread#exit]], [[m:Kernel.#exit]], [[m:Kernel.#exit!]]
#@end

--- group    -> ThreadGroup | nil

スレッドが属している [[c:ThreadGroup]] オブジェクトを返します。
死んでいるスレッドは nil を返します。

    p Thread.current.group == ThreadGroup::Default
    # => true

--- join           -> self
#@since 1.8.0
--- join(limit)    -> self | nil
#@end

スレッド self の実行が終了するまで、カレントスレッドを停止し
ます。self が例外により終了していれば、その例外がカレントス
レッドに対して発生します。

#@since 1.8.0
limit を指定して、limit 秒過ぎても自身が終了しない場合、nil を返します。

@param limit タイムアウトする時間を整数か小数で指定します。単位は秒です。
#@end

@raise ThreadError join を実行することによってデッドロックが起きる場合に発生します。またカレントスレッドを join したときにも発生します。

以下は、生成したすべてのスレッドの終了を待つ例です。

   threads = []
   threads.push(Thread.new { n = rand(5); sleep n; n })
   threads.push(Thread.new { n = rand(5); sleep n; n })
   threads.push(Thread.new { n = rand(5); sleep n; n })

   threads.each {|t| t.join}

--- key?(name)     -> bool

name に対応したスレッドに固有のデータが定義されていれば
true を返します。

@param name 文字列か [[c:Symbol]] で指定します。

#@samplecode 例
me = Thread.current
me[:oliver] = "a"
me.key?(:oliver)    # => true
me.key?(:stanley)   # => false
#@end

--- keys    -> [Symbol]

スレッド固有データに関連づけられたキーの配列を返します。キーは
[[c:Symbol]] で返されます。

    th = Thread.current
    th[:foo] = 'FOO'
    th['bar'] = 'BAR'
    p th.keys

    #=> [:bar, :foo]

--- priority    -> Integer
--- priority=(val)

スレッドの優先度を返します。この値の大きいほど優先度が高くなります。
メインスレッドのデフォルト値は 0 です。新しく生成されたスレッドは親スレッドの
priority を引き継ぎます。

#@since 1.9.1
@param val スレッドの優先度を指定します。プラットフォームに依存します。
#@else
@param val スレッドの優先度を指定します。負の値も指定できます。
#@end

#@samplecode 例
Thread.current.priority   # => 0

count1 = count2 = 0
a = Thread.new do
      loop { count1 += 1 }
    end
a.priority = -1

b = Thread.new do
      loop { count2 += 1 }
    end
b.priority = -2
count1 = count2 = 0 # reset
sleep 1   # => 1
count1    # => 13809431
count2    # => 11571921
#@end

--- raise(error_type, message, traceback)     -> ()

自身が表すスレッドで強制的に例外を発生させます。

@param error_type [[m:Kernel.#raise]] を参照してください。

@param message [[m:Kernel.#raise]] を参照してください。

@param traceback [[m:Kernel.#raise]] を参照してください。

  Thread.new {
    sleep 1
    Thread.main.raise "foobar"
  }

  begin
    sleep
  rescue
    p $!, $@
  end

  => #<RuntimeError: foobar>
     ["-:3"]

--- run    -> self

停止状態(stop)のスレッドを再開させます。
[[m:Thread#wakeup]] と異なりすぐにスレッドの切り替え
を行います。

@raise ThreadError 死んでいるスレッドに対して実行すると発生します。

#@samplecode 例
a = Thread.new { puts "a"; Thread.stop; puts "c" }
sleep 0.1 while a.status!='sleep'
puts "Got here"
a.run
a.join
# => a
# => Got here
# => c
#@end

@see [[m:Thread#wakeup]], [[m:Thread.stop]]

--- safe_level    -> Integer

self のセーフレベルを返します。カレントスレッドの
safe_level は、[[m:$SAFE]] と同じです。

セーフレベルについては[[d:spec/safelevel]]を参照してください。

#@samplecode 例
thr = Thread.new { $SAFE = 1; sleep }
Thread.current.safe_level   # => 0
thr.safe_level              # => 1
#@end

--- status    -> String | false | nil

生きているスレッドの状態を文字列 "run"、"sleep", "aborting" のいず
れかで返します。正常終了したスレッドに対して false、例外によ
り終了したスレッドに対して nil を返します。
#@#((-((<ruby 1.6 feature>)): version 1.6.5 までは、終了処理中
#@#(aborting)のスレッドに対しては "run" を返していました-))

[[m:Thread#alive?]] が真を返すなら、このメソッドも真です。

#@samplecode 例
a = Thread.new { raise("die now") }
b = Thread.new { Thread.stop }
c = Thread.new { Thread.exit }
d = Thread.new { sleep }
d.kill                  # => #<Thread:0x401b3678 aborting>
a.status                # => nil
b.status                # => "sleep"
c.status                # => false
d.status                # => "aborting"
Thread.current.status   # => "run"
#@end

@see [[m:Thread#alive?]], [[m:Thread#stop?]]

--- stop?    -> bool

スレッドが終了(dead)あるいは停止(stop)している時、true を返します。

#@samplecode 例
a = Thread.new { Thread.stop }
b = Thread.current
a.stop?   # => true
b.stop?   # => false
#@end

@see [[m:Thread#alive?]], [[m:Thread#status]]

--- value    -> object 

スレッド self が終了するまで待ち([[m:Thread#join]] と同じ)、
そのスレッドのブロックが返した値を返します。スレッド実行中に例外が
発生した場合には、その例外を再発生させます。

スレッドが [[m:Thread#kill]] によって終了した場合は、返り値は不定です。

以下は、生成したすべてのスレッドの終了を待ち結果を出力する例です。

   threads = []
   threads.push(Thread.new { n = rand(5); sleep n; n })
   threads.push(Thread.new { n = rand(5); sleep n; n })
   threads.push(Thread.new { n = rand(5); sleep n; n })

   threads.each {|t| p t.value}

最後の行で、待ち合わせを行っていることがわかりにくいと思うなら以下
のように書くこともできます。

   threads.each {|t| p t.join.value}

--- wakeup    -> self

停止状態(stop)のスレッドを実行可能状態(run)にします。

@raise ThreadError 死んでいるスレッドに対して実行すると発生します。

#@samplecode 例
c = Thread.new { Thread.stop; puts "hey!" }
sleep 0.1 while c.status!='sleep'
c.wakeup
c.join
# => "hey!"
#@end

@see [[m:Thread#run]], [[m:Thread.stop]]

--- inspect -> String
#@since 2.5.0
--- to_s -> String
#@end

自身を人間が読める形式に変換した文字列を返します。

#@samplecode 例
a = Thread.current
a.inspect   # => "#<Thread:0x00007fdbaf07ddb0 run>"
b = Thread.new{}
b.inspect   # => "#<Thread:0x00007fdbaf8f7d10@(irb):3 dead>"
#@end

#@since 1.9.2
--- add_trace_func(pr) -> Proc

スレッドにトレース用ハンドラを追加します。

追加したハンドラを返します。

@param pr トレースハンドラ([[c:Proc]] オブジェクト)
@see [[m:Thread#set_trace_func]] [[m:Kernel.#set_trace_func]]

--- set_trace_func(pr) -> Proc | nil

スレッドにトレース用ハンドラを設定します。

nil を渡すとトレースを解除します。

設定したハンドラを返します。

@param pr トレースハンドラ([[c:Proc]] オブジェクト) もしくは nil
@see [[m:Thread#add_trace_func]] [[m:Kernel.#set_trace_func]]

--- backtrace    -> [String] | nil
スレッドの現在のバックトレースを返します。

スレッドがすでに終了している場合は nil を返します。

#@end

#@since 2.0.0
--- backtrace_locations(start = 0, length = nil) -> [Thread::Backtrace::Location] | nil
--- backtrace_locations(range)                   -> [Thread::Backtrace::Location] | nil

スレッドの現在のバックトレースを [[c:Thread::Backtrace::Location]] の配
列で返します。

引数で指定した値が範囲外の場合、スレッドがすでに終了している場合は nil
を返します。

@param start 開始フレームの位置を数値で指定します。

@param length 取得するフレームの個数を指定します。

@param range 取得したいフレームの範囲を示す Range オブジェクトを指定します。

[[m:Kernel.#caller_locations]] と似ていますが、本メソッドは self に限定
した情報を返します。

@see [[c:Thread::Backtrace::Location]]

--- thread_variable_get(key) -> object | nil

引数 key で指定した名前のスレッドローカル変数を返します。

[注意]: [[m:Thread#[] ]] でセットしたローカル変数(Fiber ローカル変数)と
異なり、Fiber を切り替えても同じ変数を返す事に注意してください。

例:

  Thread.new {
    Thread.current.thread_variable_set("foo", "bar") # スレッドローカル
    Thread.current["foo"] = "bar"                    # Fiber ローカル

    Fiber.new {
      Fiber.yield [
        Thread.current.thread_variable_get("foo"), # スレッドローカル
        Thread.current["foo"],                     # Fiber ローカル
      ]
    }.resume
  }.join.value # => ['bar', nil]

この例の "bar" は [[m:Thread#thread_variable_get]] により得られ
た値で、nil は[[m:Thread#[] ]] により得られた値です。

@see [[m:Thread#thread_variable_set]], [[m:Thread#[] ]]

@see [[url:https://magazine.rubyist.net/articles/0041/0041-200Special-note.html]]

--- thread_variable_set(key, value)

引数 key で指定した名前のスレッドローカル変数に引数 value をセットしま
す。

[注意]: [[m:Thread#[] ]] でセットしたローカル変数(Fiber ローカル変数)と
異なり、セットした変数は Fiber を切り替えても共通で使える事に注意してく
ださい。

@see [[m:Thread#thread_variable_get]], [[m:Thread#[] ]]

--- thread_variable?(key) -> bool

引数 key で指定した名前のスレッドローカル変数が存在する場合に true、そ
うでない場合に false を返します。

@param key 変数名を [[c:String]] か [[c:Symbol]] で指定します。

   me = Thread.current
   me.thread_variable_set(:oliver, "a")
   me.thread_variable?(:oliver)    # => true
   me.thread_variable?(:stanley)   # => false

[注意]: [[m:Thread#[] ]] でセットしたローカル変数(Fiber ローカル変数)が
対象ではない事に注意してください。

@see [[m:Thread#thread_variable_get]], [[m:Thread#[] ]]

--- pending_interrupt?(error = nil) -> bool

self の非同期例外のキューが空かどうかを返します。

@param error 対象の例外クラスを指定します。

@see [[m:Thread.pending_interrupt?]]
#@end

#@since 2.3.0
--- name -> String

self の名前を返します。

#@#noexample Thread#name=を参照

@see [[m:Thread#name=]]

--- name=(name) -> String

self の名前を name に設定します。

プラットフォームによっては pthread やカーネルにも設定を行う場合があります。

@raise ArgumentError 引数に ASCII 互換ではないエンコーディングのものを
                     指定した場合に発生します。

#@samplecode 例
a = Thread.new{}
a.name = 'named'
a.name      # => "named"
a.inspect   # => "#<Thread:0x00007f85ac8721f0@named@(irb):1 dead>"
#@end

@see [[m:Thread#name]]
#@end

== Constants

#@if("1.9.1" <= version and version < "2.6.0")
--- MUTEX_FOR_THREAD_EXCLUSIVE -> Mutex

[[m:Thread.exclusive]]用の[[c:Mutex]]オブジェクトです。
#@since 2.4.0
(private constant です。)
#@end
#@end
