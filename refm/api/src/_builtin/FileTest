= module FileTest

ファイルの検査関数を集めたモジュールです。

=== 注意

FileTest で定義された各メソッドは、システムコールに失敗しても例外を発生させません。
真を返した時のみ、返り値は意味をもちます。
例えば、
 File.exist?('/root/.bashrc')
が false を返しても、それはファイルが存在しないことを保証しません。


== Module Functions

--- blockdev?(file)    -> bool

ファイルがブロックスペシャルファイルである時に真を返します。
そうでない場合、ファイルが存在しない場合、あるいはシステムコールに失敗した場合などには false を返します。

@param file ファイル名を表す文字列か IO オブジェクトを指定します。

@raise IOError 指定された IO オブジェクト file が既に close されていた場合に発生します。

例:
  File.blockdev?("/")           # => false
  File.blockdev?('/dev/disk0')  # => true

--- chardev?(file)    -> bool

ファイルがキャラクタスペシャルファイルの時に真を返します。そうでない場合、ファイルが存在しない場合、あるいはシステムコールに失敗した場合などには false を返します。

@param file ファイル名を表す文字列か IO オブジェクトを指定します。

@raise IOError 指定された IO オブジェクト file が既に close されていた場合に発生します。

--- executable?(file)    -> bool

ファイルがカレントプロセスにより実行できる時に真を返しま
す。そうでない場合、ファイルが存在しない場合、あるいはシステムコールに失敗した場合などには false を返します。

@param file ファイル名を表す文字列を指定します。

例:
  FileTest.executable?('/bin') # => true
  FileTest.executable?('/bin/bash') # => true

--- executable_real?(file)    -> bool

ファイルがカレントプロセスの実ユーザか実グループで実行できる時に真を返します。そうでない場合、ファイルが存在しない場合、あるいはシステムコールに失敗した場合などには false を返します。

@param file ファイル名を表す文字列を指定します。

--- exist?(file)    -> bool
#@until 2.1.0
--- exists?(file)    -> bool
#@end

ファイルが存在する時に真を返します。そうでない場合、あるいはシステムコールに失敗した場合などには false を返します。

@param file ファイル名を表す文字列か IO オブジェクトを指定します。

@raise IOError 指定された IO オブジェクト file が既に close されていた場合に発生します。

例:
  FileTest.exist?('/etc/passwd') # => true
  FileTest.exist?('/etc') # => true
  FileTest.exist?('/etc/no_such_file') # => false
  FileTest.exist?('/etc/no_such_directory') # => false

#@since 2.1.0
--- exists?(file)    -> bool

このメソッドは deprecated です。[[m:FileTest.#exist?]] を使用してください。
#@end

--- grpowned?(file)    -> bool

ファイルのグループ ID がカレントプロセスの実効グループ ID と等しい時に真を返
します。そうでない場合、ファイルが存在しない場合、あるいはシステムコールに失敗した場合などには false を返します。

@param file ファイル名を表す文字列か IO オブジェクトを指定します。

@raise IOError 指定された IO オブジェクト file が既に close されていた場合に発生します。

--- directory?(file)    -> bool

ファイルがディレクトリの時に真を返します。そうでない場合、ファイルが存在しない場合、あるいはシステムコールに失敗した場合などには false を返します。

@param file ファイル名を表す文字列か IO オブジェクトを指定します。

@raise IOError 指定された IO オブジェクト file が既に close されていた場合に発生します。

例:
  FileTest.directory?('/etc') # => true
  FileTest.directory?('/etc/passwd') # => false

  f = File.open('/etc')
  FileTest.directory?(f) # => true
  f.close
  FileTest.directory?(f) # => IOError: closed stream

--- file?(file)    -> bool

ファイルが通常ファイルである時に真を返します。そうでない場合、ファイルが存在しない場合、あるいはシステムコールに失敗した場合などには false を返します。

@param file ファイル名を表す文字列か IO オブジェクトを指定します。

@raise IOError 指定された IO オブジェクト file が既に close されていた場合に発生します。

例:
  FileTest.file?('/bin/bash') # => true
  FileTest.file?('/bin') # => false
  FileTest.file?('/no_such_file') # => false

#@since 1.8.4
--- identical?(file1, file2)    -> bool

file1 と file2 が同じファイルを指している時に真を返します。
そうでない場合、ファイルが存在しない場合、あるいはシステムコールに失敗した場合などには false を返します。

ruby 1.8.3 以前では[[m:Kernel.#test]](?-, file1, file2)を使ってください。

  open("a", "w") {}
  p File.identical?("a", "a")      #=> true
  p File.identical?("a", "./a")    #=> true
  File.link("a", "b")
  p File.identical?("a", "b")      #=> true
  File.symlink("a", "c")
  p File.identical?("a", "c")      #=> true
  open("d", "w") {}
  p File.identical?("a", "d")      #=> false

@param file1 ファイル名を表す文字列か IO オブジェクトを指定します。

@param file2 ファイル名を表す文字列か IO オブジェクトを指定します。

@raise IOError 指定された IO オブジェクト file1, file2 が既に close されていた場合に発生します。

#@end
--- pipe?(file)    -> bool

指定したファイルがパイプである時に真を返します。そうでない場合、ファイルが存在しない場合、あるいはシステムコールに失敗した場合などには false を返します。

@param file ファイル名を表す文字列か IO オブジェクトを指定します。

@raise IOError 指定された IO オブジェクト file が既に close されていた場合に発生します。

例:
  r, w = IO.pipe
  FileTest.pipe?(r) # => true
  FileTest.pipe?(w) # => true

--- socket?(file)    -> bool

ファイルがソケットである時に真を返します。そうでない場合、ファイルが存在しない場合、あるいはシステムコールに失敗した場合などには false を返します。

@param file ファイル名を表す文字列か IO オブジェクトを指定します。

@raise IOError 指定された IO オブジェクト file が既に close されていた場合に発生します。

--- owned?(file)    -> bool

ファイルのユーザがカレントプロセスの実効ユーザと等しい時に真を返します。そうでない場合、ファイルが存在しない場合、あるいはシステムコールに失敗した場合などには false を返します。

@param file ファイル名を表す文字列か IO オブジェクトを指定します。

@raise IOError 指定された IO オブジェクト file が既に close されていた場合に発生します。

--- readable?(file)    -> bool

ファイルがカレントプロセスにより読み込み可能な時に真を返します。そうでない場合、ファイルが存在しない場合、あるいはシステムコールに失敗した場合などには false を返します。

@param file ファイル名を表す文字列を指定します。

--- readable_real?(file)    -> bool

ファイルがカレントプロセスの実ユーザか実グループによって読み込み可能な時に真を
返します。そうでない場合、ファイルが存在しない場合、あるいはシステムコールに失敗した場合などには false を返します。

@param file ファイル名を表す文字列を指定します。

--- setuid?(file)    -> bool

ファイルが [[man:setuid(2)]] されている時に真を返
します。そうでない場合、ファイルが存在しない場合、あるいはシステムコールに失敗した場合などには false を返します。

@param file ファイル名を表す文字列を指定します。

@raise IOError 指定された IO オブジェクト file が既に close されていた場合に発生します。

--- setgid?(file)    -> bool

ファイルが [[man:setgid(2)]] されている時に真を返
します。そうでない場合、ファイルが存在しない場合、あるいはシステムコールに失敗した場合などには false を返します。

@param file ファイル名を表す文字列を指定します。

--- size(file)    -> Integer

ファイルのサイズを返します。

@param file ファイル名を表す文字列か IO オブジェクトを指定します。

@raise Errno::EXXX file が存在しない場合、あるいはシステムコールに失敗した場合に発生します。

@raise IOError 指定された IO オブジェクト file が既に close されていた場合に発生します。

@see [[m:FileTest.#size?]], [[m:FileTest.#zero?]]

例:
  FileTest.size('/etc/passwd') # => 5925

--- size?(file)    -> Integer | nil

ファイルのサイズを返します。ファイルが存在しない時や
ファイルのサイズが0の時には nil を返します。

@param file ファイル名を表す文字列か IO オブジェクトを指定します。

@raise IOError 指定された IO オブジェクト file が既に close されていた場合に発生します。

@see [[m:FileTest.#size]], [[m:FileTest.#zero?]] 

--- sticky?(file)    -> bool

ファイルの sticky ビット([[man:chmod(2)]] 参照)が
立っている時に真を返します。そうでない場合、ファイルが存在しない場合、あるいはシステムコールに失敗した場合などには false を返します。

@param file ファイル名を表す文字列を指定します。

--- symlink?(file)    -> bool

ファイルがシンボリックリンクである時に真を返します。そうでない場合、ファイルが存在しない場合、あるいはシステムコールに失敗した場合などには false を返します。

@param file ファイル名を表す文字列を指定します。

--- writable?(file)    -> bool

ファイルがカレントプロセスにより書き込み可能である時に真を返します。そうでない場合、ファイルが存在しない場合、あるいはシステムコールに失敗した場合などには false を返します。

@param file ファイル名を表す文字列を指定します。

--- writable_real?(file)    -> bool

ファイルがカレントプロセスの実ユーザか実グループによって書き込み可能である時に真
を返します。そうでない場合、ファイルが存在しない場合、あるいはシステムコールに失敗した場合などには false を返します。

@param file ファイル名を表す文字列を指定します。

--- zero?(file)    -> bool
#@since 2.4.0
--- empty?(file)   -> bool
#@end

ファイルが存在して、そのサイズが 0 である時に真を返します。
そうでない場合、あるいはシステムコールに失敗した場合には false を返します。

@param file ファイル名を表す文字列か IO オブジェクトを指定します。

@raise IOError 指定された IO オブジェクト file が既に close されていた場合に発生します。

@see [[m:FileTest.#size]], [[m:FileTest.#size?]]

#@since 1.9.1
--- world_readable?(path)    -> Integer | nil

path が全てのユーザから読めるならばそのファイルのパーミッションを表す
整数を返します。そうでない場合は nil を返します。

整数の意味はプラットフォームに依存します。

@param path パスを表す文字列を指定します。

   m = FileTest.world_readable?("/etc/passwd")
   "%o" % m                               # => "644"

--- world_writable?(path)    -> bool

path が全てのユーザから書き込めるならば、そのファイルのパーミッションを表す
整数を返します。そうでない場合は nil を返します。

整数の意味はプラットフォームに依存します。

@param path パスを表す文字列を指定します。

   m = FileTest.world_writable?("/tmp")
   "%o" % m                               #=> "777"
#@end
