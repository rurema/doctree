= object ENV

extend Enumerable

環境変数を表すオブジェクト。[[c:Hash]] と同様のインターフェースを持ち
ます。ただし、Hash と異なり、ENV のキーと値には文字列しか
とることができません。

ENV で得られる文字列は ENV['PATH'] を除いて汚染されていま
す。オブジェクトの汚染に関しては [[d:spec/safelevel]] を参照して下さい。
ENV['PATH'] はその要素が誰でも書き込み可能なディレクトリを含ん
でいる場合に限り汚染されます。

例:

  p ENV['TERM'].tainted?  # => true
  p path = ENV['PATH']    # => "/usr/local/bin:/usr/bin:/bin:/usr/X11/bin"
  p path.tainted?         # => false

また、ENV で得られる文字列は [[m:Object#freeze]] されています。

例:

  p ENV['TERM'].frozen?  # => true

Windows では環境変数は大文字、小文字を区別しません。(cygwin を除く)

例:

  ENV['OS'] # => Windows_NT
  ENV['os'] # => Windows_NT

--- [](key) -> String

key に対応する環境変数の値を返します。該当する環境変数が存在
しない時には nil を返します。

@param key  環境変数名を指定します。 to_str で文字列化されます。

--- []=(key, value)
--- store(key, value) -> String

key に対応する環境変数の値を value にします。
value が nil の時、key に対応する環境変数を取り除きます。 

@param key    環境変数名を指定します。 to_str で文字列化されます。
@param value  置き換えるべき値を指定します。 to_str で文字列化されます。

@return value を返します。

--- clear  -> self

環境変数をすべてクリアします。self を返します。

--- delete(key) -> String | nil
--- delete(key) {|key| ... } -> String | nil

key に対応する環境変数を取り除きます。取り除かれた環境変数の
値を返しますが、key に対応する環境変数が存在しない時には
nil を返します。

ブロックが与えられた時には key にマッチするものがなかった時
に評価されます。

@param key  環境変数名を指定します。 to_str で文字列化されます。

#@since 1.8.7
#@since 1.9.1
--- reject                     -> Enumerator
#@else
--- reject                     -> Enumerable::Enumerator
#@end
#@end
--- reject {|key, value| ... } -> Hash

環境変数のうち、ブロックを評価した値が真であるものをとり除きます。
[[m:Enumerable#reject]] と異なり Hash を返します。また、とり除いた結果
は実際の環境変数に影響を与えません。

--- delete_if {|key, value| ... } -> ENV
--- reject! {|key, value| ... }   -> ENV | nil
#@since 1.8.7
#@since 1.9.1
--- delete_if  -> Enumerator
--- reject!    -> Enumerator
#@else
--- delete_if  -> Enumerable::Enumerator
--- reject!    -> Enumerable::Enumerator
#@end
#@end

key と value を引数としてブロックを評価した値が真であ
る時、環境変数を削除します。

reject! は要素に変化がなければ nil を返します。

#@since 1.8.7
#@since 1.9.1
--- each                          -> Enumerator
--- each_pair                     -> Enumerator
#@else
--- each                          -> Enumerable::Enumerator
--- each_pair                     -> Enumerable::Enumerator
#@end
#@end
--- each {|key, value| ... }      -> self
--- each_pair {|key, value| ... } -> self
key と value を引数としてブロックを評価します。

#@since 1.8.7
#@since 1.9.1
--- each_key              -> Enumerator
#@else
--- each_key              -> Enumerable::Enumerator
#@end
#@end
--- each_key {|key| ... } -> self
key を引数としてブロックを評価します。

#@since 1.8.7
#@since 1.9.1
--- each_value                -> Enumerator
#@else
--- each_value                -> Enumerable::Enumerator
#@end
#@end
--- each_value {|value| ... } -> self
value を引数としてブロックを評価します。

--- empty? -> bool

環境変数がひとつも定義されていない時真を返します。

--- fetch(key) -> String
--- fetch(key, default) -> String
--- fetch(key) {|key| ... } -> String

key に関連づけられた値を返します。該当するキーが登録されてい
ない時には、引数 default が与えられていればその値を、ブロッ
クが与えられていればそのブロックを評価した値を返します。そのいずれ
でもなければ例外が発生します。

@param key       環境変数の名前を指定します。 to_str で文字列化されます。
@param default   keyに対応する環境変数の値がないときにこの値を返します。 
#@since 1.9.1
@raise  KeyError   引数defaultもブロックも与えられてない時、キーの探索に失敗すると発生します。
#@else
@raise  IndexError 引数defaultもブロックも与えられてない時、キーの探索に失敗すると発生します。
#@end

--- has_key?(key) -> bool
--- include?(key) -> bool
--- key?(key)     -> bool
--- member?(key)  -> bool

key で指定される環境変数が存在する時、真を返します。

@param key   環境変数の名前を指定します。to_str で文字列化されます。

--- has_value?(val) -> bool
--- value?(val)     -> bool

val を値として持つ環境変数が存在する時、真を返します。

@param val  値を指定します。to_str で文字列化されます。

#@since 1.9.1
--- key(val)   -> String | nil
#@end
--- index(val) -> String | nil

val に対応するキーを返します。対応する要素が存在しない時には
nil を返します。

#@since 1.9.1
[[m:ENV.index]] は obsolete です。使用すると警告メッセージが表示されます。
[[m:ENV.key]] を使用してください。
#@end

@param val  値を指定します。 to_str で文字列化されます。

#@until 1.9.1
--- indexes(*key) -> [String]
--- indices(*key) -> [String]

このメソッドは obsolete です。
使用すると警告メッセージが表示されます。
代わりに [[m:ENV.values_at]] を使用します。

引数で指定された名前の環境変数の値の配列を返します。

@param key  キーの名前を指定します。 to_str で文字列化されます。
#@end

--- inspect -> String

ENV オブジェクトを文字列化します。 [[m:Hash#inspect]] と同じように動作します。

--- invert -> Hash

環境変数の値をキー、名前を値とした [[c:Hash]] を生成して返します。

--- keys -> [String]

全環境変数の名前の配列を返します。

--- length -> Fixnum
--- size   -> Fixnum

環境変数の数を返します。

--- rehash -> nil

何もしません。nilを返します。

--- replace(hash) -> ENV

環境変数を hash と同じ内容に変更します。 self を返します。

@param hash  キーと値の対応関係を指定します。 to_hash でハッシュに変換されます。

#@since 1.8.7
#@since 1.9.1
--- select                      -> Enumerator
#@else
--- select                      -> Enumerable::Enumerator
#@end
#@end
--- select {|key, value| ... }  -> [[String, String]]

環境変数名と値についてブロックを評価し、真を返したものを集めた配列を返
します。配列の各要素は配列となり、第一要素が変数名、第二要素が値になり
ます。

--- shift -> [String, String]

環境変数を一つ取り除いて、それを名前と値の組の配列で返します。
環境変数が一つも設定されていなければ nil を返します。

--- to_a -> [[String, String]]

環境変数から [変数名, 値] となる 2 要素の配列の配列を生成します。

--- to_hash -> Hash
#@since 2.0.0
--- to_h -> Hash
#@end

環境変数の名前をキーとし、対応する値をもつハッシュを返します。

--- to_s -> String

環境変数を文字列化します。 Hash#to_s と同じように動作します。

--- update(other) -> ENV

ハッシュ other の内容を環境変数にマージします。重複するキー
に対応する値は other の内容で上書きされます。

self を返します。

@param other  上書きするハッシュを指定します。

--- values -> [String]

環境変数の全値の配列を返します。

--- values_at(*key) -> [String]

引数で指定されたキー(環境変数名)に対応する値の配列を返します。存在
しないキーに対しては nil が対応します。
#@until 1.9.1
[[m:ENV.indexes]] と [[m:ENV.indices]] と同じです。
#@end

例:

  ENV.update({'FOO','foo', 'BAR','bar'})
  p ENV.values_at(*%w(FOO BAR BAZ))   # => ["foo", "bar", nil]

@param key 環境変数名を指定します。 to_str で文字列化されます。
#@since 1.9.1
--- assoc(key) -> Array | nil

自身が与えられたキーに対応する要素を持つとき、見つかった要素のキーと値のペアを
配列として返します。

@param key 検索するキーを指定します。

@see [[m:Hash#assoc]]

--- rassoc(value) -> Array | nil

自身が与えられた値に対応する要素を持つとき、見つかった要素のキーと値のペアを
配列として返します。

@param value 検索する値を指定します。

@see [[m:Hash#rassoc]]

#@end

#@since 1.9.2
--- keep_if {|key, value| ... } -> ENV
--- select! {|key, value| ... } -> ENV | nil
--- keep_if -> Enumerator
--- select! -> Enumerator

キーと値を引数としてブロックを評価した結果が真であ
るような要素を環境変数に残します。

keep_if は常に self を返します。
select! はオブジェクトが変更された場合に self を、
されていない場合に nil を返します。

ブロックが省略された場合には [[c:Enumerator]] を返します。

@see [[m:ENV.delete_if]],[[m:ENV.reject!]], [[m:Hash#keep_if]], [[m:Hash#select!]],
#@end
