= class Integer < Numeric

#@since 2.4.0
alias Fixnum
alias Bignum

整数クラスです。

整数オブジェクトに特異メソッドを追加する事はできません。追加した場合、
[[c:TypeError]] が発生します。
#@else
整数の抽象クラスです。サブクラスとして [[c:Fixnum]] と [[c:Bignum]] が
あります。この 2 種類の整数は値の大きさに応じてお互いに自動的に変換さ
れます。ビット操作において整数は無限の長さのビットストリングとみなすこ
とができます。
#@end

2.4.0 から [[c:Fixnum]], [[c:Bignum]] は Integerに統合されました。
2.4.0 からはどちらも Integer クラスのエイリアスとなっています。

== Class Methods

#@since 2.5.0
--- sqrt(n) -> Integer

非負整数 n の整数の平方根を返します。すなわち n の平方根以下の
最大の非負整数を返します。

@param n 非負整数。Integer ではない場合は、最初に Integer に変換されます。
@raise Math::DomainError n が負の整数の時に発生します。

#@samplecode
Integer.sqrt(0)        # => 0
Integer.sqrt(1)        # => 1
Integer.sqrt(24)       # => 4
Integer.sqrt(25)       # => 5
Integer.sqrt(10**400) == 10**200 # => true
#@end

Math.sqrt(n).floor と同等ですが、後者は浮動小数点数の精度の限界によって
真の値とは違う結果になることがあります。

#@samplecode
Integer.sqrt(10**46)     #=> 100000000000000000000000
Math.sqrt(10**46).floor  #=>  99999999999999991611392 (!)
#@end


@see [[m:Math.sqrt]]
#@end
== Instance Methods

#@until 1.9.1
--- chr -> String

文字コードに対応する 1 バイトの文字列を返します。

例えば65.chr は "A" を返します。

逆に文字列から文字コードを得るには "A"[0] とします

@return     1バイト文字列
@raise RangeError self が 0 から 255 の範囲外の場合に発生します。
@see [[m:String#[] ]]
#@else
--- chr -> String
--- chr(encoding) -> String

与えられたエンコーディング encoding において self を文字コードと見た時、それに対応する一文字からなる文字列を返します。
引数無しで呼ばれた場合は self を US-ASCII、ASCII-8BIT、デフォルト内部エンコーディングの順で優先的に解釈します。

  p 65.chr # => "A"
  p 0x79.chr.encoding # => #<Encoding:US_ASCII>
  p 0x80.chr.encoding # => #<Encoding:ASCII_8BIT>
  p 12354.chr Encoding::UTF_8 # => "あ"
  p 12354.chr Encoding::EUC_JP
  # => RangeError: invalid codepoint 0x3042 in EUC-JP
  p 12354.chr Encoding::ASCII_8BIT
  # => RangeError: 12354 out of char range
  p (2**32).chr
  # => RangeError: bignum out of char range

@param encoding エンコーディングを表すオブジェクト。Encoding::UTF_8、'shift_jis' など。
@return     一文字からなる文字列
@raise RangeError self を与えられたエンコーディングで正しく解釈できない場合に発生します。
@see [[m:String#ord]]
#@end

#@since 2.4.0
--- digits -> [Integer]
--- digits(base) -> [Integer]

base を基数として self を位取り記数法で表記した数値を配列で返します。
base を指定しない場合の基数は 10 です。

  16.digits # => [6, 1]
  16.digits(16) # => [0, 1]

self は非負整数でなければいけません。非負整数でない場合は、Math::DomainErrorが発生します。

  -10.digits # Math::DomainError: out of domain が発生

@return     位取り記数法で表した時の数値の配列
@param base 基数となる数値。
@raise ArgumentError base に正の整数以外を指定した場合に発生します。
@raise Math::DomainError 非負整数以外に対して呼び出した場合に発生します。
#@end

--- downto(min) {|n| ... } -> self
#@since 1.8.7
#@since 1.9.1
--- downto(min) -> Enumerator
#@else
--- downto(min) -> Enumerable::Enumerator
#@end
#@end

self から min まで 1 ずつ減らしながらブロックを繰り返し実行します。
self < min であれば何もしません。

@param min   数値
@return      self を返します。

例:

  5.downto(1) {|i| print i, " " } # => 5 4 3 2 1 

@see [[m:Integer#upto]], [[m:Numeric#step]], [[m:Integer#times]]

#@since 2.4.0
--- next -> Integer
--- succ -> Integer
#@else
--- next -> Fixnum | Bignum
--- succ -> Fixnum | Bignum
#@end

self の次の整数を返します。

例:

  1.next      #=> 2
  (-1).next   #=> 0
  1.succ      #=> 2
  (-1).succ   #=> 0

@see [[m:Integer#pred]]

--- times {|n| ... } -> self
#@since 1.8.7
#@since 1.9.1
--- times -> Enumerator
#@else
--- times -> Enumerable::Enumerator
#@end
#@end

self 回だけ繰り返します。
self が正の整数でない場合は何もしません。

またブロックパラメータには 0 から self - 1 までの数値が渡されます。

  3.times { puts "Hello, World!" }  # Hello, World! と3行続いて表示される。
  0.times { puts "Hello, World!" }  # 何も表示されない。
  5.times {|n| print n }            # 01234 と表示される。

@see [[m:Integer#upto]], [[m:Integer#downto]], [[m:Numeric#step]]

--- to_i   -> self
--- to_int -> self
#@until 2.4.0
--- floor  -> self
--- ceil   -> self
--- round  -> self
--- truncate -> self
#@end

self を返します。

例:

  10.to_i   # => 10

#@since 2.4.0
#@since 2.5.0
--- floor(ndigits = 0) -> Integer
#@else
--- floor(ndigits = 0) -> Integer | Float
#@end

self と等しいかより小さな整数のうち最大のものを返します。

@param ndigits 10進数での小数点以下の有効桁数を整数で指定します。
#@since 2.5.0
               負の整数を指定した場合、小数点位置から左に少なくとも n 個の 0 が並びます。
#@else
               正の整数を指定した場合、[[c:Float]] を返します。
               小数点以下を、最大 n 桁にします。
               負の整数を指定した場合、[[c:Integer]] を返します。
               小数点位置から左に少なくとも n 個の 0 が並びます。
#@end

#@samplecode
1.floor           # => 1
#@since 2.5.0
1.floor(2)        # => 1
#@else
1.floor(2)        # => 1.0
#@end
18.floor(-1)      # => 10
(-18).floor(-1)   # => -20
#@end

@see [[m:Numeric#floor]]

#@since 2.5.0
--- ceil(ndigits = 0) -> Integer
#@else
--- ceil(ndigits = 0) -> Integer | Float
#@end

self と等しいかより大きな整数のうち最小のものを返します。

@param ndigits 10進数での小数点以下の有効桁数を整数で指定します。
#@since 2.5.0
               負の整数を指定した場合、小数点位置から左に少なくとも n 個の 0 が並びます。
#@else
               正の整数を指定した場合、[[c:Float]] を返します。
               小数点以下を、最大 n 桁にします。
               負の整数を指定した場合、[[c:Integer]] を返します。
               小数点位置から左に少なくとも n 個の 0 が並びます。
#@end

#@samplecode
1.ceil           # => 1
#@since 2.5.0
1.ceil(2)        # => 1
#@else
1.ceil(2)        # => 1.0
#@end
18.ceil(-1)      # => 20
(-18).ceil(-1)   # => -10
#@end

@see [[m:Numeric#ceil]]

#@since 2.5.0
--- round(ndigits = 0, half: :up) -> Integer
#@else
--- round(ndigits = 0, half: :up) -> Integer | Float
#@end

self ともっとも近い整数を返します。

@param ndigits 10進数での小数点以下の有効桁数を整数で指定します。
#@since 2.5.0
               負の整数を指定した場合、小数点位置から左に少なくとも n 個の 0 が並びます。
#@else
               正の整数を指定した場合、[[c:Float]] を返します。
               小数点以下を、最大 n 桁にします。
               負の整数を指定した場合、[[c:Integer]] を返します。
               小数点位置から左に少なくとも n 個の 0 が並びます。
#@end
@param half ちょうど半分の値の丸め方を指定します。
       サポートされている値は以下の通りです。

 * :up or nil: 0から遠い方に丸められます。
 * :even: もっとも近い偶数に丸められます。
 * :down: 0に近い方に丸められます。

#@samplecode
1.round         # => 1
#@since 2.5.0
1.round(2)      # => 1
#@else
1.round(2)      # => 1.0
#@end
15.round(-1)    # => 20
(-15).round(-1) #=> -20

25.round(-1, half: :up)      # => 30
25.round(-1, half: :down)    # => 20
25.round(-1, half: :even)    # => 20
35.round(-1, half: :up)      # => 40
35.round(-1, half: :down)    # => 30
35.round(-1, half: :even)    # => 40
(-25).round(-1, half: :up)   # => -30
(-25).round(-1, half: :down) # => -20
(-25).round(-1, half: :even) # => -20
#@end

@see [[m:Numeric#round]]

#@since 2.5.0
--- truncate(ndigits = 0) -> Integer
#@else
--- truncate(ndigits = 0) -> Integer | Float
#@end

0 から self までの整数で、自身にもっとも近い整数を返します。

@param ndigits 10進数での小数点以下の有効桁数を整数で指定します。
#@since 2.5.0
               負の整数を指定した場合、小数点位置から左に少なくとも n 個の 0 が並びます。
#@else
               正の整数を指定した場合、[[c:Float]] を返します。
               小数点以下を、最大 n 桁にします。
               負の整数を指定した場合、[[c:Integer]] を返します。
               小数点位置から左に少なくとも n 個の 0 が並びます。
#@end

#@samplecode
1.truncate           # => 1
#@since 2.5.0
1.truncate(2)        # => 1
#@else
1.truncate(2)        # => 1.0
#@end
18.truncate(-1)      #=> 10
(-18).truncate(-1)   #=> -10
#@end

@see [[m:Numeric#truncate]]
#@end

--- to_s -> String
#@since 1.8.0
--- to_s(base) -> String
#@end
#@since 2.4.0
--- inspect       -> String
--- inspect(base) -> String
#@end

整数を 10 進文字列表現に変換します。

#@since 1.8.0
引数を指定すれば、それを基数とした文字列表
現に変換します。

    p 10.to_s(2)    # => "1010"
    p 10.to_s(8)    # => "12"
    p 10.to_s(16)   # => "a"
    p 35.to_s(36)   # => "z"
#@end

@return     数値の文字列表現
#@since 1.8.0
@param base 基数となる 2 - 36 の数値。
@raise ArgumentError base に 2 - 36 以外の数値を指定した場合に発生します。
#@end

#@since 2.4.0
--- upto(max) {|n| ... } -> Integer
#@else
--- upto(max) {|n| ... } -> Fixnum | Bignum
#@end
#@since 1.8.7
#@since 1.9.1
--- upto(max) -> Enumerator
#@else
--- upto(max) -> Enumerable::Enumerator
#@end
#@end

self から max まで 1 ずつ増やしながら繰り返します。
self > max であれば何もしません。

@param max   数値
@return      self を返します。

例:

  5.upto(10) {|i| print i, " " } # => 5 6 7 8 9 10 

@see [[m:Integer#downto]], [[m:Numeric#step]], [[m:Integer#times]]

--- integer? -> true

常に真を返します。

例:

  1.integer?     # => true
  1.0.integer?   # => false

#@since 1.8.7
--- even? -> bool

自身が偶数であれば真を返します。
そうでない場合は偽を返します。

例:

  10.even?    # => true
  5.even?     # => false

--- odd? -> bool

自身が奇数であれば真を返します。
そうでない場合は偽を返します。

例:

  5.odd?     # => true
  10.odd?    # => false

--- ord    -> Integer
自身を返します。

   10.ord    #=> 10
#@since 1.9.1
   # String#ord
#@end
   ?a.ord    #=> 97

#@since 1.9.1
@see [[m:String#ord]]
#@end

--- pred    -> Integer

self から -1 した値を返します。

   1.pred      #=> 0
   (-1).pred   #=> -2

@see [[m:Integer#next]]
#@end

#@since 1.9.1
--- denominator -> Integer

分母(常に1)を返します。

@return 分母を返します。

例:

  10.denominator    # => 1
  -10.denominator   # => 1

@see [[m:Integer#numerator]]

--- gcd(n) -> Integer

自身と整数 n の最大公約数を返します。

@raise ArgumentError n に整数以外のものを指定すると発生します。

例:

  2.gcd(2)                    # => 2
  3.gcd(7)                    # => 1
  3.gcd(-7)                   # => 1
  ((1<<31)-1).gcd((1<<61)-1)  # => 1

また、self や n が 0 だった場合は、0 ではない方の整数の絶対値を返します。

  3.gcd(0)                    # => 3
  0.gcd(-7)                   # => 7

@see [[m:Integer#lcm]], [[m:Integer#gcdlcm]]

--- gcdlcm(n) -> [Integer]

自身と整数 n の最大公約数と最小公倍数の配列 [self.gcd(n), self.lcm(n)]
を返します。

@raise ArgumentError n に整数以外のものを指定すると発生します。

例:

  2.gcdlcm(2)                    # => [2, 2]
  3.gcdlcm(-7)                   # => [1, 21]
  ((1<<31)-1).gcdlcm((1<<61)-1)  # => [1, 4951760154835678088235319297]

@see [[m:Integer#gcd]], [[m:Integer#lcm]]

--- lcm(n) -> Integer

自身と整数 n の最小公倍数を返します。

@raise ArgumentError n に整数以外のものを指定すると発生します。

例:

  2.lcm(2)                    # => 2
  3.lcm(-7)                   # => 21
  ((1<<31)-1).lcm((1<<61)-1)  # => 4951760154835678088235319297

また、self や n が 0 だった場合は、0 を返します。

  3.lcm(0)                    # => 0
  0.lcm(-7)                   # => 0

@see [[m:Integer#gcd]], [[m:Integer#gcdlcm]]

--- numerator -> Integer

分子(常に自身)を返します。

@return 分子を返します。

例:

  10.numerator    # => 10
  -10.numerator   # => -10

@see [[m:Integer#denominator]]

--- to_r -> Rational

自身を [[c:Rational]] に変換します。

例:

  1.to_r        # => (1/1)
  (1<<64).to_r  # => (18446744073709551616/1)

#@end

#@since 1.9.2
--- rationalize      -> Rational
--- rationalize(eps) -> Rational

自身を [[c:Rational]] に変換します。

@param eps 許容する誤差

引数 eps は常に無視されます。

例:

  2.rationalize      # => (2/1)
  2.rationalize(100) # => (2/1)
  2.rationalize(0.1) # => (2/1)

#@end
#@since 2.4.0
--- to_f -> Float

self を浮動小数点数([[c:Float]])に変換します。

self が [[c:Float]] の範囲に収まらない場合、[[m:Float::INFINITY]] を返します。

例:

  1.to_f                       # => 1.0
  (Float::MAX.to_i * 2).to_f   # => Infinity

--- <=>(other) -> -1 | 0 | 1 | nil

self と other を比較して、self が大きい時に1、等しい時に 0、小さい時
に-1、比較できない時に nil を返します。

@param other 比較対象の数値
@return      -1 か 0 か 1 か nil のいずれか

#@samplecode
1 <=> 2  # => -1
1 <=> 1  # => 0
2 <=> 1  # => 1
2 <=> '' # => nil
#@end

--- -@ -> Integer

単項演算子の - です。
self の符号を反転させたものを返します。

例:

  - 10   # => -10
  - -10  # => 10

--- +(other) -> Numeric

算術演算子。和を計算します。

@param other 二項演算の右側の引数(対象)
@return 計算結果

例:

  # 和
  3 + 4 # => 7

--- -(other) -> Numeric

算術演算子。差を計算します。

@param other 二項演算の右側の引数(対象)
@return 計算結果

例:

  # 差
  4 - 1 #=> 3

--- *(other) -> Numeric

算術演算子。積を計算します。

@param other 二項演算の右側の引数(対象)
@return 計算結果

例:

  # 積
  2 * 3   # => 6

--- /(other) -> Numeric
--- div(other) -> Numeric

算術演算子。商を計算します。

@param other 二項演算の右側の引数(対象)
@return 計算結果

--- %(other) -> Numeric
--- modulo(other) -> Numeric

算術演算子。剰余を計算します。

例:

  # 剰余
  13 % 4    # => 1
  13 % -4   # => -3
  -13 % 4   # => 3
  -13 % -4  # => -1

@param other 二項演算の右側の引数(対象)
@return 計算結果

--- remainder(other) -> Numeric

self を other で割った余り r を返します。

r の符号は self と同じになります。

@param other self を割る数。

例:

  5.remainder(3)    # => 2
  -5.remainder(3)   # => -2
  5.remainder(-3)   # => 2
  -5.remainder(-3)  # => -2

  -1234567890987654321.remainder(13731)      # => -6966
  -1234567890987654321.remainder(13731.24)   # => -9906.22531493148

@see [[m:Integer#divmod]], [[m:Integer#modulo]], [[m:Numeric#modulo]]

--- divmod(other) -> [Integer, Numeric]

self を other で割った商 q と余り r を、 [q, r] という 2 要素の配列にし
て返します。 商 q は常に整数ですが、余り r は整数であるとは限りません。

@param other self を割る数。

@see [[m:Numeric#divmod]]

--- fdiv(other) -> Numeric

self を other で割った商を [[c:Float]] で返します。
ただし [[c:Complex]] が関わる場合は例外です。
その場合も成分は Float になります。

@param other self を割る数を指定します。

@see [[m:Numeric#quo]]

--- **(other) -> Numeric
#@since 2.5.0
--- pow(other) -> Numeric
--- pow(other, modulo) -> Integer
#@end

算術演算子。冪(べき乗)を計算します。

@param other 二項演算の右側の引数(対象)
#@since 2.5.0
@param modulo 指定すると、計算途中に巨大な値を生成せずに (self**other) % modulo と同じ結果を返します。
#@end
@return 計算結果
#@since 2.5.0
@raise TypeError 2引数 pow で Integer 以外を指定した場合に発生します。
@raise RangeError 2引数 pow で other に負の数を指定した場合に発生します。
#@end

例:

  2 ** 3 # => 8
  2 ** 0 # => 1
  0 ** 0 # => 1
#@since 2.5.0
   3.pow(3,  8) # => 3
   3.pow(3, -8) # => -5
   3.pow(2, -2) # => -1
  -3.pow(3,  8) # => 5
  -3.pow(3, -8) # => -3
   5.pow(2, -8) # => -7

@see [[m:BigDecimal#power]]
#@end
--- abs -> Integer
--- magnitude -> Integer

self の絶対値を返します。

例:

  -12345.abs   # => 12345
  12345.abs    # => 12345
  -1234567890987654321.abs   # => 1234567890987654321

--- ==(other) -> bool
--- ===(other) -> bool

比較演算子。数値として等しいか判定します。

@param other 比較対象の数値
@return      self と other が等しい場合 true を返します。
             そうでなければ false を返します。

例:

  1 == 2      # => false
  1 == 1.0    # => true

--- <(other)  -> bool

比較演算子。数値として小さいか判定します。

@param other 比較対象の数値
@return      self よりも other が大きい場合 true を返します。
             そうでなければ false を返します。

例:

  1 < 1    # => false
  1 < 2    # => true

--- <=(other) -> bool

比較演算子。数値として等しいまたは小さいか判定します。

@param other 比較対象の数値
@return      self よりも other の方が大きい場合か、
             両者が等しい場合 true を返します。
             そうでなければ false を返します。

例:

  1 <= 0    # => false
  1 <= 1    # => true
  1 <= 2    # => true

--- >(other)  -> bool

比較演算子。数値として大きいか判定します。

@param other 比較対象の数値
@return      self よりも other の方が小さい場合 true を返します。
             そうでなければ false を返します。

例:

  1 > 0    # => true
  1 > 1    # => false

--- >=(other) -> bool

比較演算子。数値として等しいまたは大きいか判定します。

@param other 比較対象の数値
@return      self よりも other の方が小さい場合か、
             両者が等しい場合 true を返します。
             そうでなければ false を返します。

例:

  1 >= 0    # => true
  1 >= 1    # => true
  1 >= 2    # => false

--- ~        -> Integer
ビット演算子。否定を計算します。

例:

  ~1  # => -2
  ~3  # => -4
  ~-4 # => 3

--- |(other) -> Integer
ビット二項演算子。論理和を計算します。

@param other 数値

例:

  1 | 1 # => 1
  2 | 3 # => 3

--- &(other) -> Integer
ビット二項演算子。論理積を計算します。

@param other 数値

例:

  1 & 1 # => 1
  2 & 3 # => 2

--- ^(other) -> Integer
ビット二項演算子。排他的論理和を計算します。

@param other 数値

例:

  1 ^ 1 # => 0
  2 ^ 3 # => 1

--- [](nth) -> Integer

nth 番目のビット(最下位ビット(LSB)が 0 番目)が立っている時 1
を、そうでなければ 0 を返します。

@param nth  何ビット目を指すかの数値
@return     1 か 0

self[nth]=bit (つまりビットの修正) がないのは、Numeric 関連クラスが
immutable であるためです。

例:

  a = 0b11001100101010
  30.downto(0) do |n| print a[n] end
  # => 0000000000000000011001100101010

  a = 9**15
  50.downto(0) do |n|
    print a[n]
  end
  # => 000101110110100000111000011110010100111100010111001

--- <<(bits) -> Integer

シフト演算子。bits だけビットを左にシフトします。

@param bits シフトさせるビット数

例:

    printf("%#b\n", 0b0101 << 1) # => 0b1010
    p -1 << 1 # => -2

--- >>(bits) -> Integer
シフト演算子。bits だけビットを右にシフトします。

右シフトは、符号ビット(最上位ビット(MSB))が保持されます。
bitsが実数の場合、小数点以下を切り捨てた値でシフトします。

@param bits シフトさせるビット数

例:

    printf("%#b\n", 0b0101 >> 1) # => 0b10
    p -1 >> 1 # => -1

--- size -> Integer

整数の実装上のサイズをバイト数で返します。

例:

    p 1.size
    p 0x1_0000_0000.size
    # => 4
         8

--- bit_length -> Integer

self を表すのに必要なビット数を返します。

「必要なビット数」とは符号ビットを除く最上位ビットの位置の事を意味しま
す。2**n の場合は n+1 になります。self にそのようなビットがない(0 や
-1 である)場合は 0 を返します。

例: ceil(log2(int < 0 ? -int : int+1)) と同じ結果

   (-2**12-1).bit_length     # => 13
   (-2**12).bit_length       # => 12
   (-2**12+1).bit_length     # => 12
   -0x101.bit_length         # => 9
   -0x100.bit_length         # => 8
   -0xff.bit_length          # => 8
   -2.bit_length             # => 1
   -1.bit_length             # => 0
   0.bit_length              # => 0
   1.bit_length              # => 1
   0xff.bit_length           # => 8
   0x100.bit_length          # => 9
   (2**12-1).bit_length      # => 12
   (2**12).bit_length        # => 13
   (2**12+1).bit_length      # => 13

#@end
#@since 2.5.0
--- allbits?(mask) -> bool
self & mask の全てのビットが 1 なら true を返します。

self & mask == mask と等価です。

@param mask ビットマスクを整数で指定します。

#@samplecode
42.allbits?(42)                   # => true
0b1010_1010.allbits?(0b1000_0010) # => true
0b1010_1010.allbits?(0b1000_0001) # => false
0b1000_0010.allbits?(0b1010_1010) # => false
#@end

@see [[m:Integer#anybits?]]
@see [[m:Integer#nobits?]]
--- anybits? -> bool
self & mask のいずれかのビットが 1 なら true を返します。

self & mask != 0 と等価です。

@param mask ビットマスクを整数で指定します。

#@samplecode
42.anybits?(42)                   # => true
0b1010_1010.anybits?(0b1000_0010) # => true
0b1010_1010.anybits?(0b1000_0001) # => true
0b1000_0010.anybits?(0b0010_1100) # => false
#@end

@see [[m:Integer#allbits?]]
@see [[m:Integer#nobits?]]
--- nobits? -> bool
self & mask のすべてのビットが 0 なら true を返します。

self & mask == 0 と等価です。

@param mask ビットマスクを整数で指定します。

#@samplecode
42.nobits?(42)                   # => false
0b1010_1010.nobits?(0b1000_0010) # => false
0b1010_1010.nobits?(0b1000_0001) # => false
0b0100_0101.nobits?(0b1010_1010) # => true
#@end

@see [[m:Integer#allbits?]]
@see [[m:Integer#anybits?]]
#@end
