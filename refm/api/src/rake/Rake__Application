= class Rake::Application
include Rake::TaskManager

Rake で使用するメインのクラスです。

コマンドラインで rake コマンドを実行した時に作成され、実行されます。

== Public Instance Methods

#@# --- add_import(file_name)
#@#
#@# 与えられたファイルをロード予定ファイルのリストに追加します。
#@#
#@# @param file_name ロード予定のファイル名を指定します。
#@# :nodoc:

--- add_loader(ext, loader)

与えられた拡張子で終わるファイル名のファイルをロードするためのローダーを
自身に追加します。

@param ext 拡張子を指定します。

@param loader ローダーを指定します。

#@samplecode 例
require "rake/loaders/makefile"

# Rakefile での記載例とする

task default: :test
task :test

makefile =<<-EOS
<< <<-'SAMPLE_MF'
# Comments
a: a1 a2 a3 a4
EOS
IO.write("sample.mf", makefile)
Rake.application.add_loader("mf", Rake::MakefileLoader.new)
Rake.application.add_import("sample.mf")
Rake::Task.task_defined?("a") # => false
Rake.application.load_imports
Rake::Task.task_defined?("a") # => true
#@end

#@# --- collect_command_line_tasks(argv) -> Array
#@#
#@# コマンドライン引数を解析して実行するタスクのリストを返します。
#@#
#@# 実行するタスクが指定されていない場合はデフォルトのタスクのみ返します。
#@# また、このとき環境変数の解析も行います。
#@# :nodoc:

#@# --- display_prerequisites
#@#
#@# タスクとそのタスクに依存しているタスクを表示します。
#@# :nodoc:

#@# --- display_tasks_and_comments
#@#
#@# タスクとコメントを表示します。
#@# :nodoc:

#@# --- dynamic_width -> Integer
#@#
#@# ターミナルの幅を計算します。
#@# :nodoc:

#@# --- dynamic_width_stty
#@#
#@# [[man:stty(1)]] を用いてターミナルの幅を計算します。
#@# :nodoc:

#@# --- dynamic_width_tput
#@#
#@# [[man:tput(1)]] を用いてターミナルの幅を計算します。
#@# :nodoc:

#@# --- find_rakefile_location -> Array | nil
#@#
#@# Rakefile とそのファイルがあったディレクトリのペアを返します。
#@# :nodoc:

#@# --- handle_options
#@#
#@# コマンドラインオプションを [[c:OptionParser]] に登録します。
#@# :nodoc:

#@# --- have_rakefile -> String | nil
#@#
#@# Rakefile がカレントディレクトリに存在する場合はそのファイル名を返します。
#@# そうでない場合は nil を返します。
#@#
#@# @see [[m:Rake::Application::DEFAULT_RAKEFILES]]
#@# :nodoc:

--- init(app_name = 'rake')

コマンドラインオプションとアプリケーション名を初期化します。

#@samplecode 例
# Rakefile での記載例とする

task default: :test
task :test

Rake.application.name # => "rake"
Rake.application.init("MyApp") # => ["default"]
Rake.application.name # => "MyApp"
#@end

#@# --- invoke_task(task_string)
#@#
#@# private?
#@#
#@# 与えられた文字列を解析してタスクを実行します。
#@#
#@# @param task_string タスク名とそれに与えるパラメータをあらわす文字列を指定します。
#@# :nodoc:

#@# --- load_imports
#@#
#@# ロード予定のファイルを全てロードします。
#@#
#@# 既にロード済みのファイルはロードしません。
#@# :nodoc:

--- load_rakefile

Rakefile を探してロードします。

#@#noexample

--- name -> String

アプリケーションの名前を返します。通常は 'rake' という名前を返します。

#@samplecode
# Rakefile での記載例とする

task default: :test_rake_app
task :test_rake_app do
  Rake.application.name # => "rake"
end
#@end

--- options -> OpenStruct

コマンドラインで与えられたアプリケーションのオプションを返します。

#@samplecode
# Rakefile での記載例とする

task default: :test_rake_app
task :test_rake_app do
  Rake.application.options  # => #<OpenStruct always_multitask=false, backtrace=false, build_all=false, dryrun=false, ignore_deprecate=false, ignore_system=false, job_stats=false, load_system=false, nosearch=false, rakelib=["rakelib"], show_all_tasks=false, show_prereqs=false, show_task_pattern=nil, show_tasks=nil, silent=false, suppress_backtrace_pattern=nil, thread_pool_size=8, trace=false, trace_output=#<IO:<STDERR>>, trace_rules=false>
end
#@end

--- original_dir -> String

rake コマンドを実行したディレクトリを返します。

#@samplecode
# Rakefile での記載例とする

task default: :test_rake_app
task :test_rake_app do
  Rake.application.original_dir # => "/path/to/dir"
end
#@end

#@# --- parse_task_string(string) -> [String, Array]
#@#
#@# 与えられた文字列を解析して、タスク名とそれに与えるパラメータのペアを返します。
#@#
#@# @param string タスク名とそれに与えるパラメータのペアを返します。
#@# :nodoc:

#@# --- rake_require(file_name, paths = $LOAD_PATH, loaded = $") -> bool
#@#
#@# [[m:Kernel#require]] に似ていますが、*.rb ファイルではなく *.rake ファイルを探索します。
#@#
#@# @param file_name ロードするファイル名を指定します。
#@#
#@# @param paths ロードパスを指定します。
#@#
#@# @param loaded ロード済みのファイルリストを指定します。
#@#
#@# @raise LoadError 指定されたファイルが見つからなかった場合に発生します。
#@# :nodoc:

--- rakefile -> String

実際に使用されている Rakefile の名前を返します。

#@samplecode
# Rakefile での記載例とする

task default: :test_rake_app
task :test_rake_app do
  Rake.application.rakefile # => "Rakefile"
end
#@end

#@# --- rakefile_location -> String
#@#
#@# Rakefile のパスを返します。
#@# :nodoc:

#@# --- raw_load_rakefile
#@#
#@# Rakefile をロードします。
#@#
#@# @raise RuntimeError Rakefile が見つからなかった場合に発生します。
#@# :nodoc:

--- run

Rake アプリケーションを実行します。

このメソッドは以下の 3 ステップを実行します。

 * コマンドラインオプションを初期化します。[[m:Rake::Application#init]]
 * タスクを定義します。[[m:Rake::Application#load_rakefile]]
 * コマンドラインで指定されたタスクを実行します。[[m:Rake::Application#top_level]]

#@# --- standard_exception_handling{ ... }
#@#
#@# 与えられたブロックを評価する際に発生する標準的な例外を捕捉して
#@# アプリケーションを終了させます。
#@# :nodoc:

#@# --- standard_rake_options -> Array
#@#
#@# Rake コマンドで使用する標準的なコマンドラインオプションのリストを返します。
#@# :nodoc:

#@# --- system_dir -> String
#@#
#@# システム全体の Rakefile が格納されているディレクトリを返します。
#@#
#@# 環境変数 RAKE_SYSTEM で設定できます。
#@# :nodoc:

#@# --- terminal_width -> Integer
#@#
#@# ターミナルの幅を返します。
#@#
#@# 環境変数 RAKE_COLUMNS で指定することが出来ます。
#@# :nodoc:

--- top_level

Rake アプリケーションに与えられたトップレベルのタスク
(コマンドラインで指定されたタスク) を実行します。

#@samplecode
# Rakefile での記載例とする

task default: :test1
task :test1
task :test2 do
  puts "test2"
end

# rake test2 で実行
Rake.application.top_level

# => "test2"
#@end

--- top_level_tasks -> Array

コマンドラインで指定されたタスクのリストを返します。

#@samplecode
# Rakefile での記載例とする

task default: :test_rake_app
task :test_rake_app do
  Rake.application.top_level_tasks # => ["default"]
end
#@end

#@# --- truncate(string, width) -> String
#@#
#@# 与えられた文字列を与えられた幅で切り詰めます。
#@# :nodoc:

#@# --- truncate_output?
#@# :nodoc:

--- tty_output=(tty_output_state)

TTY に対する出力状態を上書きします。

大抵の場合、テストのために使用します。

@param tty_output_state 変更後の状態を指定します

#@samplecode
# Rakefile での記載例とする

task default: :test_rake_app
task :test_rake_app do
  Rake.application.tty_output?                 # => false
  Rake.application.tty_output = "debug output" # => "debug output"
  Rake.application.tty_output?                 # => "debug output"
end
#@end

#@# --- tty_output? -> bool
#@#
#@# TTY に出力している場合は真を返します。そうでない場合は偽を返します。
#@# :nodoc:

#@# --- unix? -> bool
#@#
#@# 現在のプラットフォームが UNIX 系である場合、真を返します。
#@# そうでない場合は偽を返します。
#@# :nodoc:

#@# --- windows? -> bool
#@#
#@# 現在のプラットフォームが Windows 系である場合、真を返します。
#@# そうでない場合は偽を返します。
#@# :nodoc:

== Constants

--- DEFAULT_RAKEFILES -> Array

デフォルトで Rakefile として扱うファイル名の配列を返します。

'rakefile', 'Rakefile', 'rakefile.rb', 'Rakefile.rb' が指定されています。
